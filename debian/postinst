#!/bin/bash -e

# Source debconf/confmodule
. /usr/share/debconf/confmodule

# CONSTANTS   ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++
start_spaceify="# Added by spaceify"
end_spaceify="# Added by spaceify ends"
comm_out_spaceify="# Commented out by spaceify: "

# DEBCONF - GET SELECTIONS   ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++
db_get spaceify/ethernet
eth="$RET"

db_get spaceify/wlan
wlan="$RET"

db_get spaceify/wlan_ap
intext="$RET"
if [[ "$intext" == "Internal" ]]; then
	intext=1
else
	intext=0
fi

db_get spaceify/admin_password
admin_password="$RET"
db_unregister spaceify/admin_password || true

# MODIFY CONFIGURATION SCRIPTS  ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++
# /etc/network/interfaces - give ip to wlan0 (or what adapter names user selected) -- -- -- -- --
sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/network/interfaces	# remove spaceify's previous comments/entries

sed -i "/${wlan}/,/^$/s/^/${comm_out_spaceify}&/g" /etc/network/interfaces					# comment out existing wlan (range: first line with string $wlan until empty line)

wlan_conf=$(</etc/network/interfaces)
wlan_conf=$( echo "${wlan_conf}\n\n${start_spaceify}\n" )									# append new configuration
wlan_conf=$( echo "${wlan_conf}auto ${wlan}\n" )
wlan_conf=$( echo "${wlan_conf}iface ${wlan} inet static\n" )
wlan_conf=$( echo "${wlan_conf}address 10.0.0.1\n" )
wlan_conf=$( echo "${wlan_conf}netmask 255.255.255.0\n" )
wlan_conf=$( echo "${wlan_conf}${end_spaceify}" )
sudo printf "$wlan_conf" > /etc/network/interfaces

# /etc/default/docker
sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/docker > /dev/null 2>&1 || true	# remove spaceify's previous entries
docker_conf=$(</etc/default/docker) > /dev/null 2>&1 || true
docker_conf=$( echo "${docker_conf}\n\n${start_spaceify}\n" )
docker_conf=$( echo "${docker_conf}DOCKER_OPTS=\"--dns 10.0.0.1\"\n" )
docker_conf=$( echo "${docker_conf}${end_spaceify}" )
sudo printf "$docker_conf" > /etc/default/docker

# /etc/rc.local  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# Configure custom iptables chains for Spaceify, we do this in order to be able to remove our rules

# Remove spaceify's previous entries
sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/rc.local

sudo iptables -t mangle -D PREROUTING -j Spaceify-mangle > /dev/null 2>&1 || true
sudo iptables -t mangle -F Spaceify-mangle > /dev/null 2>&1 || true
sudo iptables -t mangle -X Spaceify-mangle > /dev/null 2>&1 || true
sudo iptables -t nat -D PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1 > /dev/null 2>&1 || true
sudo iptables -t nat -D PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.1 > /dev/null 2>&1 || true
sudo iptables -t filter -D FORWARD -m mark --mark 99 -j DROP > /dev/null 2>&1 || true

sudo iptables -t nat -D PREROUTING -j Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true
sudo iptables -t nat -D POSTROUTING -j Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
sudo iptables -t nat -F Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
sudo iptables -t nat -X Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
sudo iptables -t nat -F Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true
sudo iptables -t nat -X Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true

sudo iptables -t nat -D PREROUTING -j Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true
sudo iptables -t nat -D POSTROUTING -j Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
sudo iptables -t nat -F Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
sudo iptables -t nat -X Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
sudo iptables -t nat -F Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true
sudo iptables -t nat -X Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true

# Create mangle chain
rclocal1="\/sbin\/iptables -t mangle -N Spaceify-mangle"
rclocal2="\/sbin\/iptables -t mangle -A PREROUTING -j Spaceify-mangle"
rclocal3="\/sbin\/iptables -t mangle -A Spaceify-mangle -j MARK --set-mark 99"
rclocal4="\/sbin\/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10\.0\.0\.1"
rclocal5="\/sbin\/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10\.0\.0\.1"
rclocal6="\/sbin\/iptables -t filter -A FORWARD -m mark --mark 99 -j DROP"

mangle_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n"

# Create HTTP filter chain, NAT chain and redirect chain
rclocal1="\/sbin\/iptables -t nat -N Spaceify-HTTP-Nat-Redir"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-HTTP-Nat-Redir"
rclocal3="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Redir -d 10\.0\.0\.1\/32 -j ACCEPT"
rclocal4="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Redir -s 10\.0\.0\.0\/24 -p tcp --dport 80 -j REDIRECT --to-port 8888"

rclocal5="\/sbin\/iptables -t nat -N Spaceify-HTTP-Nat-Masq"
rclocal6="\/sbin\/iptables -t nat -A POSTROUTING -j Spaceify-HTTP-Nat-Masq"
rclocal7="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Masq -o "${eth}" -j MASQUERADE" 

http_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

# Create HTTPS filter chain, NAT chain and redirect chain
rclocal1="\/sbin\/iptables -t nat -N Spaceify-HTTPS-Nat-Redir"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-HTTPS-Nat-Redir"
rclocal3="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -d 10\.0\.0\.1\/32 -j ACCEPT"
rclocal4="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -s 10\.0\.0\.0\/24 -p tcp --dport 443 -j REDIRECT --to-port 8889"

rclocal5="\/sbin\/iptables -t nat -N Spaceify-HTTPS-Nat-Masq"
rclocal6="\/sbin\/iptables -t nat -A POSTROUTING -j Spaceify-HTTPS-Nat-Masq"
rclocal7="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Masq -o "${eth}" -j MASQUERADE"

https_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

# Append spaceify specific lines in rc.local before "exit 0"
sudo sed -i "s/^exit.*/$start_spaceify\n$mangle_chain\n$http_chain\n$https_chain$end_spaceify\nexit 0/" /etc/rc.local

# /etc/sysctl.conf - enable forwarding (for nat)  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
sysctl=$(</etc/sysctl.conf)
sysctl=$( echo "$sysctl" | sed "s/${comm_out_spaceify}//g" )								# remove spaceify's previous comments
sysctl=$( echo "$sysctl" | sed "/${start_spaceify}/,/${end_spaceify}/d" )					# remove spaceify's previous entries
sysctl=$( echo "$sysctl" | sed "s/.*net.ipv4.ip_forward.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
sysctl=$( echo "${sysctl}\n\n${start_spaceify}\nnet.ipv4.ip_forward=1\n${end_spaceify}" )	# append new value
sudo printf "$sysctl" > /etc/sysctl.conf

# /etc/hostapd/hostapd_spaceify-ap.conf and /etc/default/hostapd - configure/enable AP - -- -- --
if [ "$intext" -eq 1 ]; then																# configure
	hostap=$( echo "$start_spaceify\n" )
	hostap=$( echo "${hostap}interface=${wlan}\n" )
	hostap=$( echo "${hostap}driver=nl80211\n" )
	hostap=$( echo "${hostap}ssid=spaceify\n" )
	hostap=$( echo "${hostap}channel=6\n" )
	hostap=$( echo "${hostap}${end_spaceify}" )
	sudo printf "$hostap" > /etc/hostapd/hostapd_spaceify.conf

	dhostapd=$(</etc/default/hostapd)
	dhostapd=$( echo "$dhostapd" | sed "s/${comm_out_spaceify}//g" )						# remove spaceify's previous comments
	dhostapd=$( echo "$dhostapd" | sed "/${start_spaceify}/,/${end_spaceify}/d" )			# remove spaceify's previous entries
	dhostapd=$( echo "$dhostapd" | sed "s/.*DAEMON_CONF.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
	dhostapd=$( echo "${dhostapd}\n\n${start_spaceify}\nDAEMON_CONF=/etc/hostapd/hostapd_spaceify.conf\n${end_spaceify}" )	# append new value
	sudo printf "$dhostapd" > /etc/default/hostapd
else																						# comment configuration if hostpad is installed and it has hostapd_spaceify.conf configuration
	hpd=$( sudo dpkg-query -W -f='${Status}\n' hostapd )
	hpd=$( echo "$hpd" | sudo sed -n '/installed/{p;q;}' )
	if [[ "$hpd" != "" ]]; then
		sudo service hostapd stop															# stop hostapd
		sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/hostapd	# restore previous configuration
	fi
fi

# /etc/init/spaceify.conf -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
sudo sed -i "s/CHANGEADAPTER/${eth}/" /etc/init/spaceify.conf

# /etc/monit/monitrc   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
#sudo sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/monit/monitrc						# remove spaceify's previous entries

#monit=$(</etc/monit/monitrc)
#monit=$( echo "${monit}\n\n${start_spaceify}\n" )												# append new configuration
#monit=$( echo "${monit}include /var/lib/spaceify/monit/spaceify.conf\n" )
#monit=$( echo "${monit}${end_spaceify}\n" )
#sudo printf "$monit" > /etc/monit/monitrc

core_port="2497"
#sudo sed -i "s/%1/${core_port}/" /var/lib/spaceify/monit/spaceify.conf						# change the port to monitor to configuration
sudo sed -i "s/%1/${core_port}/" /etc/monit/conf.d/spaceify.conf

# EXECUTE COMMANDS  ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++ ++
# Create Spaceifys databases    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
sudo mkdir /var/lib/spaceify/db/ > /dev/null 2>&1 || true									# create directory for the databases

db_version=4
spaceify_db="/var/lib/spaceify/db/spaceify.db"
if [ -e $spaceify_db ]; then																# database exists - make modifications if database (version) changes
	odv=$( sudo sqlite3 $spaceify_db "SELECT db_version FROM settings" > /dev/null 2>&1 || true )
	if [[ $odv == "" ]]; then odv=0; fi

	if [[ $odv -lt 4 ]]; then																	# db_version is not defined (v < 4) > add provided_services table and db_version field to settings
		sudo sqlite3 $spaceify_db "CREATE TABLE provided_services(unique_name TEXT, service_name TEXT, service_type TEXT);"  > /dev/null 2>&1 || true

		sudo sqlite3 $spaceify_db "ALTER TABLE settings ADD COLUMN db_version INTEGER;" > /dev/null 2>&1 || true
		sudo sqlite3 $spaceify_db "ALTER TABLE settings ADD COLUMN release_name TEXT;" > /dev/null 2>&1 || true
		sudo sqlite3 $spaceify_db "ALTER TABLE settings ADD COLUMN release_version TEXT;" > /dev/null 2>&1 || true
		sudo sqlite3 $spaceify_db "ALTER TABLE settings ADD COLUMN session_ttl INTEGER DEFAULT 86400000;" > /dev/null 2>&1 || true
		sudo sqlite3 $spaceify_db "UPDATE settings SET db_version=${db_version};" > /dev/null 2>&1 || true

		sudo sqlite3 $spaceify_db "ALTER TABLE applications ADD COLUMN version TEXT;" > /dev/null 2>&1 || true
		sudo sqlite3 $spaceify_db "ALTER TABLE applications ADD COLUMN install_datetime TEXT;" > /dev/null 2>&1 || true
	fi
else																						# create new database
	sudo touch $spaceify_db

	sudo sqlite3 $spaceify_db "CREATE TABLE applications(unique_name TEXT NOT NULL PRIMARY KEY, unique_directory TEXT, docker_image_id TEXT, type TEXT, version TEXT, inject_identifier TEXT DEFAULT NULL, install_datetime TEXT, inject_enabled INTEGER DEFAULT 0);"
	sudo sqlite3 $spaceify_db "CREATE TABLE provided_services(unique_name TEXT, service_name TEXT, service_type TEXT);"
	sudo sqlite3 $spaceify_db "CREATE TABLE inject_hostnames(unique_name TEXT, inject_hostname TEXT);"
	sudo sqlite3 $spaceify_db "CREATE TABLE inject_files(unique_name TEXT, url_or_path TEXT, file_directory TEXT DEFAULT NULL, file TEXT, inject_type TEXT, inject_order INTEGER, is_spaceify INTEGER DEFAULT 0);"
	sudo sqlite3 $spaceify_db "CREATE TABLE settings(language TEXT DEFAULT 'en_US', splash_ttl INTEGER DEFAULT 3600000, session_ttl INTEGER DEFAULT 86400000, db_version INTEGER, release_name TEXT, release_version TEXT);"
	sudo sqlite3 $spaceify_db "CREATE TABLE user(edge_id TEXT NOT NULL PRIMARY KEY, edge_password TEXT, admin_password_hash TEXT, admin_salt TEXT, admin_login_count INTEGER DEFAULT 0, admin_last_login INTEGER DEFAULT 0);"

	sudo sqlite3 $spaceify_db "INSERT INTO inject_files (url_or_path, file_directory, file, inject_type, inject_order, is_spaceify) VALUES('edge.spaceify.net/', '', 'engine.io.js', 'javascript', 1, 1);"
	sudo sqlite3 $spaceify_db "INSERT INTO inject_files (url_or_path, file_directory, file, inject_type, inject_order, is_spaceify) VALUES('edge.spaceify.net/', '', 'spaceifyclient.js','javascript', 2, 1);"
	sudo sqlite3 $spaceify_db "INSERT INTO settings (language, splash_ttl, db_version) VALUES('en_US', 3600000, ${db_version});"
fi

	# SET RELEASE NAME AND VERSION - THIS MUST BE REMEMBERED TO SET FOR EACH NEW PACKAGE
sudo sqlite3 $spaceify_db "UPDATE settings SET release_name='Alpha Centauri', release_version='0.1.0';"

# Certificates and keys   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# Copy certificates and keys to Spaceify's folders from Squid's folders
sudo mkdir /var/lib/spaceify/www/ > /dev/null 2>&1 || true
sudo mkdir /var/lib/spaceify/ssl/ > /dev/null 2>&1 || true
sudo cp /etc/squid3/certs/spaceifyCA/spaceifyCA.crt /var/lib/spaceify/www/ > /dev/null 2>&1 || true
sudo cp /etc/squid3/certs/spaceify.crt /var/lib/spaceify/ssl/ > /dev/null 2>&1 || true
sudo cp /etc/squid3/certs/spaceify.key /var/lib/spaceify/ssl/ > /dev/null 2>&1 || true

# Add spaceifyCA.crt as a trusted certificate for openssl (remember to do this for the docker containers when installing applications)
sudo rm /etc/ssl/certs/`openssl x509 -hash -noout -in /etc/squid3/certs/spaceifyCA/spaceifyCA.crt`.0 > /dev/null 2>&1 || true
sudo ln -s /etc/squid3/certs/spaceifyCA/spaceifyCA.crt /etc/ssl/certs/`openssl x509 -hash -noout -in /etc/squid3/certs/spaceifyCA/spaceifyCA.crt`.0

# File permissions etc.   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
sudo mkdir -p /var/lib/spaceify/dhcp-data > /dev/null 2>&1 || true							# dhcp server directories/files
sudo chmod -R 0664 /var/lib/spaceify/dhcp-data > /dev/null 2>&1 || true
# sudo chown - R root:spaceify /var/lib/spaceify/dhcp-data > /dev/null 2>&1 || true

sudo mkdir -p /var/lib/spaceify/ipt-data > /dev/null 2>&1 || true							# iptables directories/files
sudo chmod -R 0664 /var/lib/spaceify/ipt-data > /dev/null 2>&1 || true
# sudo chown - R root:spaceify /var/lib/spaceify/ipt-data > /dev/null 2>&1 || true

sudo mkdir -p /var/lib/spaceify/dev > /dev/null 2>&1 || true								# FIFO for iptables writer
sudo chmod -R 0700 /var/lib/spaceify/dev > /dev/null 2>&1 || true
sudo chown - R root:root /var/lib/spaceify/dev > /dev/null 2>&1 || true

sudo chmod 0755 /usr/bin/spm  > /dev/null 2>&1 || true										# Spaceify Packet Manager script

sudo chmod 0755 /var/lib/spaceify/bashscripts/stop_containers.sh > /dev/null 2>&1 || true	# a script to stop and remove running containers

# Create and initialize Docker image  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
ubun=$( sudo docker images )
ubun=$( echo "$ubun" | sudo sed -n '/spaceifyubuntu/{p;q;}' )
if [[ "$ubun" == "" ]]; then																# create image only if it is not in the images list

	printf "\nCreating the Docker image\n\n"
	cd /var/lib/spaceify/docker
	sudo docker build -no-cache -rm -t spaceifyubuntu .
fi

# Create custom iptables chains for Spaceify   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# Create mangle chain
iptables -t mangle -N Spaceify-mangle
iptables -t mangle -A PREROUTING -j Spaceify-mangle
iptables -t mangle -A Spaceify-mangle -j MARK --set-mark 99
iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1
iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.1
iptables -t filter -A FORWARD -m mark --mark 99 -j DROP

# Create HTTP filter chain, NAT chain and redirect chain
iptables -t nat -N Spaceify-HTTP-Nat-Redir
iptables -t nat -A PREROUTING -j Spaceify-HTTP-Nat-Redir
iptables -t nat -A Spaceify-HTTP-Nat-Redir -d 10.0.0.1/32 -j ACCEPT
iptables -t nat -A Spaceify-HTTP-Nat-Redir -s 10.0.0.0/24 -p tcp --dport 80 -j REDIRECT --to-port 8888

iptables -t nat -N Spaceify-HTTP-Nat-Masq
iptables -t nat -A POSTROUTING -j Spaceify-HTTP-Nat-Masq
iptables -t nat -A Spaceify-HTTP-Nat-Masq -o "${eth}" -j MASQUERADE 

# Create HTTPS filter chain, NAT chain and redirect chain
iptables -t nat -N Spaceify-HTTPS-Nat-Redir
iptables -t nat -A PREROUTING -j Spaceify-HTTPS-Nat-Redir
iptables -t nat -A Spaceify-HTTPS-Nat-Redir -d 10.0.0.1/32 -j ACCEPT
iptables -t nat -A Spaceify-HTTPS-Nat-Redir -s 10.0.0.0/24 -p tcp --dport 443 -j REDIRECT --to-port 8889

iptables -t nat -N Spaceify-HTTPS-Nat-Masq
iptables -t nat -A POSTROUTING -j Spaceify-HTTPS-Nat-Masq
iptables -t nat -A Spaceify-HTTPS-Nat-Masq -o "${eth}" -j MASQUERADE 

sudo echo 1 > /proc/sys/net/ipv4/ip_forward

# Update node.js to the latest stable release and install the required node.js modules (versions are defined in package.json)
# sudo npm cache clear -f
# sudo npm install -g n
# sudo n stable

sudo npm install -g node-gyp@0.6.2
cd /var/lib/spaceify
sudo npm install

# Create user names and passwords for edge and admin -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# Is edge already registered? Try to find previous edge_id.uuid file.
fuuid=""
if [ -e /var/lib/spaceify/db/edge_id.uuid ]; then
	fuuid=$(</var/lib/spaceify/db/edge_id.uuid)
elif [ -e /tmp/edge_id.uuid ]; then
	fuuid=$(</tmp/edge_id.uuid)
fi

# Parse file content if edge_id.uuid was found
uuid=""
edge_password=""
if [[ "$fuuid" != "" ]]; then
	OIFS="$IFS"
	IFS="," read -ra auuid <<< "$fuuid"
	IFS="$OIFS"

	uuid="${auuid[0]}"
	edge_password="${auuid[1]}"
fi

# If uuid exists, edge is already registered. Dont't register it again!!!
if [[ "$uuid" == "" ]]; then
	# try five times to register a new edge_id
	cnt=1
	while [ $cnt -lt 6 ]; do
		printf "\nTrying to register edge: attempt ${cnt} of 5...\n"

		data1=$(openssl rand -hex 4)
		data2=$(openssl rand -hex 2)
		data3=$(openssl rand -hex 2)
		data4i=$(openssl rand -hex 2)
		data4r=$(openssl rand -hex 6)
		uuid="${data1}-${data2}-${data3}-${data4i}-${data4r}"

		edge_password=$(openssl rand -hex 16)

		result=$(sudo curl -d "eid=${uuid}&epw=${edge_password}" --location "http://spaceify.net/edge_register.php")
		if [[ "$result" == "" ]]; then
			echo "${uuid},${edge_password}" > /var/lib/spaceify/db/edge_id.uuid

			printf "\nEdge registered successfully with edge id ${uuid}.\nFile edge_id.uuid can be found here:\n"
			printf "/var/lib/spaceify/db\n"
			printf "Store this file in a secure location for future use. If the file is placed to /tmp prior to reinstalling spaceify\n"
			printf "the new installation will reuse the id and previous registration.\n\n"

			break;
		else
			printf "\nRegistration failed: ${result}\n"
		fi

		let cnt=cnt+1
	done

	if [ $cnt -eq 6 ]; then
		printf "\nFailed to register edge. The installation is aborted.\n\n"
		exit 255
	fi
else
	printf "\nThe file edge_id.uuid was found containing edge id ${uuid}.\nPrevious edge registration is valid.\n\n"
fi

# Update the created/restored edge_id and password AND admin password to the database.
admin_salt=$(openssl rand -hex 64)
admin_password_hash=$(echo -n "${admin_password}${admin_salt}" | openssl dgst -sha512 -hex | awk '{print $2}')
sudo sqlite3 /var/lib/spaceify/db/spaceify.db "INSERT OR REPLACE INTO user (edge_id, edge_password, admin_password_hash, admin_salt)  VALUES('${uuid}', '${edge_password}', '${admin_password_hash}', '${admin_salt}');"

# Start services -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
if [[ -z $(sudo service network-manager status |& grep running) ]]; then
	printf "\nNetworking not restarted, please do it manually\n"
else
	sudo service network-manager restart
	sudo ifconfig ${wlan} down
	sudo ifconfig ${wlan} 10.0.0.1 netmask 255.255.255.0 up
fi

if [ "$intext" -eq 1 ]; then
	sudo service hostapd restart > /dev/null 2>&1 || true
fi

sudo service spaceifydns restart > /dev/null 2>&1 || true
sudo service spaceifydhcp restart > /dev/null 2>&1 || true
sudo service spaceifyipt restart > /dev/null 2>&1 || true
sudo service spaceify restart > /dev/null 2>&1 || true

sudo service monit restart > /dev/null 2>&1 || true

# Script is found here after installation, if testing is required (eg. finding where the script fails): /var/lib/dpkg/info/spaceify.postinst
# After changing the script run dpkg-reconfigure spaceify
