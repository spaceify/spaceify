#!/bin/bash -e

# Source debconf/confmodule
. /usr/share/debconf/confmodule

#############
# CONSTANTS #
#############
start_spaceify="# Added by spaceify"
end_spaceify="# Added by spaceify ends"
comm_out_spaceify="# Commented out by spaceify: "

############################
# DEBCONF - GET SELECTIONS #
############################
db_get spaceify/ethernet
eth="$RET"

db_get spaceify/wlan
wlan="$RET"

db_get spaceify/wlan_ap
intext="$RET"
if [[ "$intext" == "Internal" ]]; then
	intext=1
else
	intext=0
fi

db_get spaceify/admin_password
admin_password="$RET"
db_unregister spaceify/admin_password || true

################################
# MODIFY CONFIGURATION SCRIPTS #
################################

#----- /etc/network/interfaces - give ip to wlan0 (or what adapter names user selected) -----#

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/network/interfaces	# remove spaceify's previous comments/entries

sed -i "/${wlan}/,/^$/s/^/${comm_out_spaceify}&/g" /etc/network/interfaces					# comment out existing wlan (range: first line with string $wlan until empty line)

wlan_conf=$(</etc/network/interfaces)
wlan_conf=$( echo "${wlan_conf}\n\n${start_spaceify}\n" )									# append new configuration
wlan_conf=$( echo "${wlan_conf}auto ${wlan}\n" )
wlan_conf=$( echo "${wlan_conf}iface ${wlan} inet static\n" )
wlan_conf=$( echo "${wlan_conf}address 10.0.0.1\n" )
wlan_conf=$( echo "${wlan_conf}netmask 255.255.255.0\n" )
wlan_conf=$( echo "${wlan_conf}${end_spaceify}" )
printf "$wlan_conf" > /etc/network/interfaces

#----- /etc/default/docker -----#

sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/docker > /dev/null 2>&1 || true	# remove spaceify's previous entries
docker_conf=$(</etc/default/docker) > /dev/null 2>&1 || true
docker_conf=$( echo "${docker_conf}\n\n${start_spaceify}\n" )
docker_conf=$( echo "${docker_conf}DOCKER_OPTS=\"--dns 10.0.0.1\"\n" )
docker_conf=$( echo "${docker_conf}${end_spaceify}" )
printf "$docker_conf" > /etc/default/docker

#----- /etc/rc.local -----#

# Remove spaceify's previous iptables entries
sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/rc.local

# Create mangle chain
rclocal1="\/sbin\/iptables -t mangle -N Spaceify-mangle"
rclocal2="\/sbin\/iptables -t mangle -A PREROUTING -j Spaceify-mangle"
rclocal3="\/sbin\/iptables -t mangle -A Spaceify-mangle -i docker0 -j RETURN"
rclocal4="\/sbin\/iptables -t mangle -A Spaceify-mangle -j MARK --set-mark 99"
rclocal5="\/sbin\/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10\.0\.0\.1"
rclocal6="\/sbin\/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10\.0\.0\.1"
rclocal7="\/sbin\/iptables -t filter -A FORWARD -m mark --mark 99 -j DROP"

mangle_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

# Create HTTP filter chain, NAT chain and redirect chain
rclocal1="\/sbin\/iptables -t nat -N Spaceify-HTTP-Nat-Redir"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-HTTP-Nat-Redir"
rclocal3="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Redir -d 10\.0\.0\.1\/32 -j ACCEPT"
rclocal4="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Redir -s 10\.0\.0\.0\/24 -p tcp --dport 80 -j REDIRECT --to-port 8888"

rclocal5="\/sbin\/iptables -t nat -N Spaceify-HTTP-Nat-Masq"
rclocal6="\/sbin\/iptables -t nat -A POSTROUTING -j Spaceify-HTTP-Nat-Masq"
rclocal7="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Masq -o "${eth}" -j MASQUERADE" 

http_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

# Create HTTPS filter chain, NAT chain and redirect chain
rclocal1="\/sbin\/iptables -t nat -N Spaceify-HTTPS-Nat-Redir"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-HTTPS-Nat-Redir"
rclocal3="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -d 10\.0\.0\.1\/32 -j ACCEPT"
rclocal4="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -s 10\.0\.0\.0\/24 -p tcp --dport 443 -j REDIRECT --to-port 8889"

rclocal5="\/sbin\/iptables -t nat -N Spaceify-HTTPS-Nat-Masq"
rclocal6="\/sbin\/iptables -t nat -A POSTROUTING -j Spaceify-HTTPS-Nat-Masq"
rclocal7="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Masq -o "${eth}" -j MASQUERADE"

https_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

# Append spaceify specific lines in rc.local before "exit 0"
sed -i "s/^exit.*/$start_spaceify\n$mangle_chain\n$http_chain\n$https_chain$end_spaceify\nexit 0/" /etc/rc.local

#----- /etc/sysctl.conf - enable forwarding (for nat) -----#

sysctl=$(</etc/sysctl.conf)
sysctl=$( echo "$sysctl" | sed "s/${comm_out_spaceify}//g" )								# remove spaceify's previous comments
sysctl=$( echo "$sysctl" | sed "/${start_spaceify}/,/${end_spaceify}/d" )					# remove spaceify's previous entries
sysctl=$( echo "$sysctl" | sed "s/.*net.ipv4.ip_forward.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
sysctl=$( echo "${sysctl}\n\n${start_spaceify}\nnet.ipv4.ip_forward=1\n${end_spaceify}" )	# append new value
printf "$sysctl" > /etc/sysctl.conf

#----- /etc/hostapd/hostapd_spaceify-ap.conf and /etc/default/hostapd - configure/enable AP -----#

if [ "$intext" -eq 1 ]; then																# configure
	hostap=$( echo "$start_spaceify\n" )
	hostap=$( echo "${hostap}interface=${wlan}\n" )
	hostap=$( echo "${hostap}driver=nl80211\n" )
	hostap=$( echo "${hostap}ssid=spaceify\n" )
	hostap=$( echo "${hostap}channel=6\n" )
	hostap=$( echo "${hostap}${end_spaceify}" )
	printf "$hostap" > /etc/hostapd/hostapd_spaceify.conf

	dhostapd=$(</etc/default/hostapd)
	dhostapd=$( echo "$dhostapd" | sed "s/${comm_out_spaceify}//g" )						# remove spaceify's previous comments
	dhostapd=$( echo "$dhostapd" | sed "/${start_spaceify}/,/${end_spaceify}/d" )			# remove spaceify's previous entries
	dhostapd=$( echo "$dhostapd" | sed "s/.*DAEMON_CONF.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
	dhostapd=$( echo "${dhostapd}\n\n${start_spaceify}\nDAEMON_CONF=/etc/hostapd/hostapd_spaceify.conf\n${end_spaceify}" )	# append new value
	printf "$dhostapd" > /etc/default/hostapd
else																						# comment configuration if hostpad is installed and it has hostapd_spaceify.conf configuration
	hpd=$( dpkg-query -W -f='${Status}\n' hostapd )
	hpd=$( echo "$hpd" | sed -n '/installed/{p;q;}' )
	if [[ "$hpd" != "" ]]; then
		service hostapd stop																# stop hostapd
		sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/hostapd	# restore previous configuration
	fi
fi

#----- /etc/init/spaceify.conf -----#

sed -i "s/CHANGEADAPTER/${eth}/" /etc/init/spaceify.conf

#----- /etc/monit/monitrc -----#

#sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/monit/monitrc							# remove spaceify's previous entries

#monit=$(</etc/monit/monitrc)
#monit=$( echo "${monit}\n\n${start_spaceify}\n" )											# append new configuration
#monit=$( echo "${monit}include /var/lib/spaceify/monit/spaceify.conf\n" )
#monit=$( echo "${monit}${end_spaceify}\n" )
#printf "$monit" > /etc/monit/monitrc

core_port="2497"
#sed -i "s/%1/${core_port}/" /var/lib/spaceify/monit/spaceify.conf							# change the port to monitor to configuration
sed -i "s/%1/${core_port}/" /etc/monit/conf.d/spaceify.conf

#######################################
# GET EXTERNAL DNS SERVERS IP ADDRESS #
#######################################
lease=""																					# Get the leases for the user selected network adapter connected to the internet
find="option domain-name-servers "
if [[ -s "/var/lib/dhcp/dhclient.${eth}.leases" ]]; then									# Try different locations (FILE exists and has a size greater than zero)
	lease="/var/lib/dhcp/dhclient.${eth}.leases"
elif [[ -s "/var/lib/dhcp/dhclient.leases" ]]; then
	lease="/var/lib/dhcp/dhclient.leases"
elif [[ -s "/var/lib/dhcp3/dhclient.${eth}.leases"  ]]; then
	lease="/var/lib/dhcp3/dhclient.${eth}.leases"
elif [[ -s "/var/lib/dhcp3/dhclient.leases" ]]; then
	lease="/var/lib/dhcp3/dhclient.leases"
else
	find="nameserver"
	lease="/etc/resolv.conf"
fi

lines=""																					# Get the DNS servers from the DHCP leases
while read line; do
	odns=$(grep -i "$find" <<< "$line" || true)
	if [ ! -z "$odns" ]; then
		lines="$lines$odns;"
	fi
done < $lease

lines=${lines//$find/}																		# Replace
lines=${lines//;/,}
lines=${lines// /}

IFS=$split read -a lines <<< "$lines"														# Split into an array of IPs

dip=""
for ip in "${lines[@]}"; do
	ip=${ip//,/}

	if [[ "$ip" != "127.0.0.1" && "$ip" != "10.0.0.1" ]]; then
		dip=$ip
		break;
	fi
done

mkdir -p /var/lib/spaceify/data/dns > /dev/null 2>&1 || true								# Save the IP to Spaceify's directory for its DNS server to find

if [ ! -z "$dip" ]; then																		# IP was found
	printf $dip > /var/lib/spaceify/data/dns/ip
elif [[ -z "$dip" && ! -s /var/lib/spaceify/data/dns/ip ]]; then								# Use Google's server if IP wasn't found and previous IP is not set
	printf "8.8.8.8" > /var/lib/spaceify/data/dns/ip
elif [[ ! -s /var/lib/spaceify/data/dns/ip ]]; then												# Use Google's server if previous IP is not set
	printf "8.8.8.8" > /var/lib/spaceify/data/dns/ip
fi

####################
# EXECUTE COMMANDS #
####################

#----- Add custom iptables chains for Spaceify -----#

# To avoid duplicates delete existing rules
iptables -t mangle -D PREROUTING -j Spaceify-mangle > /dev/null 2>&1 || true
iptables -t mangle -F Spaceify-mangle > /dev/null 2>&1 || true
iptables -t mangle -X Spaceify-mangle > /dev/null 2>&1 || true
iptables -t nat -D PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1 > /dev/null 2>&1 || true
iptables -t nat -D PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.1 > /dev/null 2>&1 || true
iptables -t filter -D FORWARD -m mark --mark 99 -j DROP > /dev/null 2>&1 || true

iptables -t nat -D PREROUTING -j Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true
iptables -t nat -D POSTROUTING -j Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -F Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -X Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -F Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true
iptables -t nat -X Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true

iptables -t nat -D PREROUTING -j Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true
iptables -t nat -D POSTROUTING -j Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -F Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -X Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -F Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true
iptables -t nat -X Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true

# Mangle chain
iptables -t mangle -N Spaceify-mangle
iptables -t mangle -A PREROUTING -j Spaceify-mangle
iptables -t mangle -A Spaceify-mangle -i docker0 -j RETURN
iptables -t mangle -A Spaceify-mangle -j MARK --set-mark 99
iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1
iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.1
iptables -t filter -A FORWARD -m mark --mark 99 -j DROP

# HTTP filter chain, NAT chain and redirect chain
iptables -t nat -N Spaceify-HTTP-Nat-Redir
iptables -t nat -A PREROUTING -j Spaceify-HTTP-Nat-Redir
iptables -t nat -A Spaceify-HTTP-Nat-Redir -d 10.0.0.1/32 -j ACCEPT
iptables -t nat -A Spaceify-HTTP-Nat-Redir -s 10.0.0.0/24 -p tcp --dport 80 -j REDIRECT --to-port 8888

iptables -t nat -N Spaceify-HTTP-Nat-Masq
iptables -t nat -A POSTROUTING -j Spaceify-HTTP-Nat-Masq
iptables -t nat -A Spaceify-HTTP-Nat-Masq -o "${eth}" -j MASQUERADE 

# HTTPS filter chain, NAT chain and redirect chain
iptables -t nat -N Spaceify-HTTPS-Nat-Redir
iptables -t nat -A PREROUTING -j Spaceify-HTTPS-Nat-Redir
iptables -t nat -A Spaceify-HTTPS-Nat-Redir -d 10.0.0.1/32 -j ACCEPT
iptables -t nat -A Spaceify-HTTPS-Nat-Redir -s 10.0.0.0/24 -p tcp --dport 443 -j REDIRECT --to-port 8889

iptables -t nat -N Spaceify-HTTPS-Nat-Masq
iptables -t nat -A POSTROUTING -j Spaceify-HTTPS-Nat-Masq
iptables -t nat -A Spaceify-HTTPS-Nat-Masq -o "${eth}" -j MASQUERADE 

#----- Enable IP forwarding -----#

echo 1 > /proc/sys/net/ipv4/ip_forward

#----- Create Spaceify's databases -----#

mkdir /var/lib/spaceify/data/db/ > /dev/null 2>&1 || true									# create directory for the databases
cd /var/lib/spaceify/data/db

dbs="/var/lib/spaceify/data/db/spaceify.db"

if [ -e $dbs ]; then																		# database exists

	#rows=$(sqlite3 $dbs -separator ";" "SELECT unique_name, unique_directory, docker_image_id, type, version FROM applications")
	#splt=(${rows//$';'/ })
	#
	#iter=$((${#splt[@]} - 5))
	#for i in $(seq 0 4 $iter); do
	#
	#	unique_name=${splt[$i]}
	#	unique_directory=${splt[$(($i + 1))]}
	#	docker_image_id=${splt[$(($i + 2))]}
	#	type=${splt[$(($i + 3))]}
	#	version=${splt[$(($i + 4))]}
	#
	#	$(sqlite3 $dbs "DELETE FROM applications WHERE unique_name='${unique_name}'")		# Delete database entries
	#	$(sqlite3 $dbs "DELETE FROM provided_services WHERE unique_name='${unique_name}'")
	#	$(sqlite3 $dbs "DELETE FROM inject_hostnames WHERE unique_name='${unique_name}'")
	#	$(sqlite3 $dbs "DELETE FROM inject_files WHERE unique_name='${unique_name}'")
	#
	#	docker rmi $docker_image_id  > /dev/null 2>&1 || true								# Remove application images
	#
	#	directory=""																		# Remove applications files but leave persistent volume untouched
	#	if [[ "$type" == "spacelet" ]]; then
	#		directory="/var/lib/spaceify/data/spacelets/${unique_directory}volume/"
	#	elif [[ "$type" == "sandboxed" ]]; then
	#		directory="/var/lib/spaceify/data/sandboxed/${unique_directory}volume/"
	#	elif [[ "$type" == "native" ]]; then
	#		directory="/var/lib/spaceify/data/native/${unique_directory}volume/"	
	#	fi
	#
	#	rm -r "${directory}application" > /dev/null 2>&1 || true
	#	rm -r "${directory}tls" > /dev/null 2>&1 || true
	#
	#	# reinstall applications here with spm?
	#
	#done
	:
else																						# create a new database

	touch $dbs
	sqlite3 $dbs < /var/lib/spaceify/data/db/create.sql

fi

#  Set release name and version and data version
versions=$(< /var/lib/spaceify/versions)
release_version=$(echo $versions | awk -F : '{print $2}')
release_name=$(echo $versions | awk -F : '{print $3}')
db_version=$(echo $versions | awk -F : '{print $7}')
sqlite3 $dbs "UPDATE settings SET release_name='${release_name}', release_version='${release_version}', db_version='${db_version}';"

#----- Certificates and keys -----#

# Copy certificates and keys to Spaceify's folders from Squid's folders
mkdir /var/lib/spaceify/code/www/ > /dev/null 2>&1 || true
mkdir /var/lib/spaceify/data/tls/ > /dev/null 2>&1 || true
cp /etc/squid3/certs/spaceifyCA/spaceify.crt /var/lib/spaceify/code/www/ > /dev/null 2>&1 || true
cp /etc/squid3/certs/server.crt /var/lib/spaceify/data/tls/ > /dev/null 2>&1 || true
cp /etc/squid3/certs/server.key /var/lib/spaceify/data/tls/ > /dev/null 2>&1 || true

#----- File permissions etc. -----#

mkdir -p /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true							# dhcp server directories/files
chmod -R 0664 /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true
# chown - R root:spaceify /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true

mkdir -p /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true							# iptables directories/files
chmod -R 0664 /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true
# chown - R root:spaceify /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true

mkdir -p /var/lib/spaceify/data/dev > /dev/null 2>&1 || true								# FIFO for iptables writer
chmod -R 0700 /var/lib/spaceify/data/dev > /dev/null 2>&1 || true
chown - R root:root /var/lib/spaceify/data/dev > /dev/null 2>&1 || true

chmod 0755 /usr/bin/spm  > /dev/null 2>&1 || true											# Spaceify Packet Manager script

chmod 0755 /var/lib/spaceify/data/scripts/stop_containers.sh > /dev/null 2>&1 || true		# a script to stop and remove running containers

#----- Create and initialize Docker image -----#

#ubun=$( docker images )
#ubun=$( echo "$ubun" | sed -n '/spaceifyubuntu/{p;q;}' )
#if [[ "$ubun" == "" ]]; then																# create image always (# only if it is not in the images list)

	printf "\nCreating the Docker image\n\n"

	docker rmi spaceifyubuntu > /dev/null 2>&1 || true

	cd /var/lib/spaceify/data/docker
	docker build --no-cache --rm -t spaceifyubuntu .
#fi

# Update node.js to the latest stable release and install the required node.js modules (versions are defined in package.json)
# npm cache clear -f
# npm install -g n
# n stable

npm install -g node-gyp@0.6.2
cd /var/lib/spaceify/code
npm install

#----- Create user names and passwords for edge and admin -----#

# Is edge already registered? Try to find previous edge_id.uuid file.
euuid=""
if [ -e /var/lib/spaceify/data/db/edge_id.uuid ]; then
	euuid=$(</var/lib/spaceify/data/db/edge_id.uuid)
elif [ -e /tmp/edge_id.uuid ]; then
	euuid=$(</tmp/edge_id.uuid)
fi

# Parse file content if edge_id.uuid was found
uuid=""
edge_password=""
if [[ "$euuid" != "" ]]; then
	OIFS="$IFS"
	IFS="," read -ra auuid <<< "$euuid"
	IFS="$OIFS"

	uuid="${auuid[0]}"
	edge_password="${auuid[1]}"
fi

# If uuid exists, edge is already registered. Dont't register it again!!!
if [[ "$uuid" == "" ]]; then
	# try five times to register a new edge_id
	cnt=1
	while [ $cnt -lt 6 ]; do
		printf "\nTrying to register edge: attempt ${cnt} of 5...\n"

		data1=$(openssl rand -hex 4)
		data2=$(openssl rand -hex 2)
		data3=$(openssl rand -hex 2)
		data4i=$(openssl rand -hex 2)
		data4r=$(openssl rand -hex 6)
		uuid="${data1}-${data2}-${data3}-${data4i}-${data4r}"

		edge_password=$(openssl rand -hex 16)

		result=$(curl -d "eid=${uuid}&epw=${edge_password}" --location "http://spaceify.net/edge_register.php")
		if [[ "$result" == "" ]]; then
			echo "${uuid},${edge_password}" > /var/lib/spaceify/data/db/edge_id.uuid

			printf "\nEdge registered successfully with edge id ${uuid}.\nFile edge_id.uuid can be found here:\n"
			printf "/var/lib/spaceify/data/db\n"
			printf "Store this file in a secure location for future use. If the file is placed to /tmp prior to reinstalling spaceify\n"
			printf "the new installation will reuse the id and previous registration.\n\n"

			break;
		else
			printf "\nRegistration failed: ${result}\n"
		fi

		let cnt=cnt+1
	done

	if [ $cnt -eq 6 ]; then
		printf "\nFailed to register edge. The installation is aborted.\n\n"
		exit 255
	fi
else
	printf "\nThe file edge_id.uuid was found containing edge id ${uuid}.\nPrevious edge registration is valid.\n\n"
fi

# Update the created/restored edge_id and password AND admin password to the database.
admin_salt=$(openssl rand -hex 64)
admin_password_hash=$(echo -n "${admin_password}${admin_salt}" | openssl dgst -sha512 -hex | awk '{print $2}')
sqlite3 /var/lib/spaceify/data/db/spaceify.db "INSERT OR REPLACE INTO user (edge_id, edge_password, admin_password_hash, admin_salt)  VALUES('${uuid}', '${edge_password}', '${admin_password_hash}', '${admin_salt}');"

#----- Start services -----#

if [[ -z $(service network-manager status |& grep running) ]]; then
	printf "\nNetworking not restarted, please do it manually\n"
else
	service network-manager restart
	ifconfig ${wlan} down
	ifconfig ${wlan} 10.0.0.1 netmask 255.255.255.0 up
fi

if [ "$intext" -eq 1 ]; then
	service hostapd restart > /dev/null 2>&1 || true
fi

service spaceifydns restart > /dev/null 2>&1 || true
service spaceifydhcp restart > /dev/null 2>&1 || true
service spaceifyipt restart > /dev/null 2>&1 || true
service spaceify restart > /dev/null 2>&1 || true

service monit restart > /dev/null 2>&1 || true

# Script is found here after installation, if testing is required (eg. finding where the script fails): /var/lib/dpkg/info/spaceify.postinst
# After changing the script run dpkg-reconfigure spaceify
