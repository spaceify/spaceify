#!/bin/bash

# ----------
# ----------
# ----------
# ----------
# ---------- CONSTANTS ---------- #
start_spaceify="# Added by Spaceify"
end_spaceify="# Added by Spaceify ends"
comm_out_spaceify="# Commented out by Spaceify: "

# ----------
# ----------
# ----------
# ----------
# ---------- DEBCONF - GET INPUT ---------- #

. /var/lib/spaceify/data/scripts/input.sh

eth=$(</var/lib/spaceify/data/interfaces/ethernet)
wlan=$(</var/lib/spaceify/data/interfaces/wlan)
is_internal=$(</var/lib/spaceify/data/interfaces/is_internal)

# ----------
# ----------
# ----------
# ----------
# ---------- DATABASE ---------- #

. /var/lib/spaceify/data/scripts/database.sh												# database mangement, get previous version information
dbpath="/var/lib/spaceify/data/db/spaceify.db"

# ----------
# ----------
# ----------
# ----------
# ---------- MODIFY CONFIGURATION SCRIPTS ---------- #

	# ----- /etc/network/interfaces - give ip to wlan0 (or what adapter names user selected) ----- #

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/network/interfaces > /dev/null 2>&1 || true	# remove Spaceify's previous comments/entries

sed -i "/${wlan}/,/^$/s/^/${comm_out_spaceify}&/g" /etc/network/interfaces					# comment out existing wlan (range: first line with string $wlan until empty line)

wlan_conf=$(</etc/network/interfaces)
wlan_conf=$( echo "${wlan_conf}\n\n${start_spaceify}\n" )									# append new configuration
wlan_conf=$( echo "${wlan_conf}auto ${wlan}\n" )
wlan_conf=$( echo "${wlan_conf}iface ${wlan} inet static\n" )
wlan_conf=$( echo "${wlan_conf}address 10.0.0.1\n" )
wlan_conf=$( echo "${wlan_conf}netmask 255.255.255.0\n" )
wlan_conf=$( echo "${wlan_conf}${end_spaceify}" )
printf "$wlan_conf" > /etc/network/interfaces

	# ----- /etc/default/docker ----- #

sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/docker > /dev/null 2>&1 || true	# remove Spaceify's previous entries

if [ -s /etc/default/docker ]; then
	docker_conf=$(</etc/default/docker)
else
	docker_conf=""
fi

docker_conf=$( echo "${docker_conf}\n\n${start_spaceify}\n" )
docker_conf=$( echo "${docker_conf}DOCKER_OPTS=\"--dns 10.0.0.1 --iptables=false\"\n" )
docker_conf=$( echo "${docker_conf}${end_spaceify}" )
printf "$docker_conf" > /etc/default/docker

	# ----- /etc/rc.local ----- #

		# - Remove Spaceify's previous iptables entries -#
sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/rc.local

# Create mangle chain
#rclocal1="\/sbin\/iptables -t mangle -N Spaceify-mangle"
#rclocal2="\/sbin\/iptables -t mangle -A PREROUTING -j Spaceify-mangle"
#rclocal3="\/sbin\/iptables -t mangle -A Spaceify-mangle -i docker0 -j RETURN"
#rclocal4="\/sbin\/iptables -t mangle -A Spaceify-mangle -j MARK --set-mark 99"
#rclocal5="\/sbin\/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10\.0\.0\.1"
#rclocal6="\/sbin\/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10\.0\.0\.1"
#rclocal7="\/sbin\/iptables -t filter -A FORWARD -m mark --mark 99 -j DROP"

#mangle_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"
mangle_chain=""

		# - create HTTP filter chain, NAT chain and redirect chain - #
rclocal1="\/sbin\/iptables -t nat -N Spaceify-HTTP-Nat-Redir"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-HTTP-Nat-Redir"
rclocal3="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Redir -d 10\.0\.0\.1\/32 -j ACCEPT"
rclocal4="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Redir -s 10\.0\.0\.0\/24 -p tcp --dport 80 -j REDIRECT --to-port 8888"

rclocal5="\/sbin\/iptables -t nat -N Spaceify-HTTP-Nat-Masq"
rclocal6="\/sbin\/iptables -t nat -A POSTROUTING -j Spaceify-HTTP-Nat-Masq"
rclocal7="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Masq -o "${eth}" -j MASQUERADE" 

http_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

		# - create HTTPS filter chain, NAT chain and redirect chain - #
rclocal1="\/sbin\/iptables -t nat -N Spaceify-HTTPS-Nat-Redir"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-HTTPS-Nat-Redir"
rclocal3="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -d 10\.0\.0\.1\/32 -j ACCEPT"
rclocal4="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -s 10\.0\.0\.0\/24 -p tcp --dport 443 -j REDIRECT --to-port 8889"

rclocal5="\/sbin\/iptables -t nat -N Spaceify-HTTPS-Nat-Masq"
rclocal6="\/sbin\/iptables -t nat -A POSTROUTING -j Spaceify-HTTPS-Nat-Masq"
rclocal7="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Masq -o "${eth}" -j MASQUERADE"

https_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

		# - Docker container connection chains - #
rclocal1="\/sbin\/iptables -t nat -N Spaceify-Nat-Connections"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-Nat-Connections"
rclocal3="\/sbin\/iptables -t nat -A PREROUTING -m addrtype --dst-type LOCAL -j Spaceify-Nat-Connections"
rclocal4="\/sbin\/iptables -t nat -A OUTPUT ! -d 127.0.0.0\/8 -m addrtype --dst-type LOCAL -j Spaceify-Nat-Connections"
rclocal5="\/sbin\/iptables -t nat -A POSTROUTING -s 172\.17\.0\.0\/16 ! -o docker0 -j MASQUERADE"

rclocal6="\/sbin\/iptables -t filter -N Spaceify-Filter-Connections"
rclocal7="\/sbin\/iptables -t filter -A FORWARD -j Spaceify-Filter-Connections"

docker_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

		# - Appication Manager rules - accept connections only from localhost - #
#appman_port=$(cat /var/lib/spaceify/code/www/libs/config.json | grep "APPMAN_PORT_SECURE" | sed 's/[^0-9]*//g')
#rclocal1="\/sbin\/iptables -A INPUT -p tcp -s localhost --dport $appman_port -j ACCEPT"
#rclocal2="\/sbin\/iptables -A INPUT -p tcp --dport $appman_port -j DROP"

appman_rules="" #"$rclocal1\n$rclocal2\n"

		# - append spaceify specific lines in rc.local before "exit 0" - #
sed -i "s/^exit.*/$start_spaceify\n$mangle_chain\n$http_chain\n$https_chain\n$docker_chain\n$appman_rules\n$end_spaceify\nexit 0/" /etc/rc.local

	# ----- /etc/sysctl.conf - enable forwarding (for nat) ----- #

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/sysctl.conf > /dev/null 2>&1 || true

sysctl=$(</etc/sysctl.conf)
sysctl=$( echo "$sysctl" | sed "s/.*net.ipv4.ip_forward.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
sysctl=$( echo "${sysctl}\n\n${start_spaceify}\nnet.ipv4.ip_forward=1\n${end_spaceify}" > /dev/null 2>&1 || true )	# append new value
printf "$sysctl" > /etc/sysctl.conf

	# ----- /etc/hostapd/hostapd_spaceify-ap.conf and /etc/default/hostapd - configure/enable AP ----- #

if [[ "$is_internal" -eq "1" ]]; then														# configure
	sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/hostapd > /dev/null 2>&1 || true

	hostap=$( echo "$start_spaceify\n" )
	hostap=$( echo "${hostap}interface=${wlan}\n" )
	hostap=$( echo "${hostap}driver=nl80211\n" )
	hostap=$( echo "${hostap}ssid=spaceify\n" )
	hostap=$( echo "${hostap}channel=6\n" )
	hostap=$( echo "${hostap}${end_spaceify}" )
	printf "$hostap" > /etc/hostapd/hostapd_spaceify.conf

	dhostapd=$(</etc/default/hostapd)
	dhostapd=$( echo "$dhostapd" | sed "s/.*DAEMON_CONF.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
	dhostapd=$( echo "${dhostapd}\n\n${start_spaceify}\nDAEMON_CONF=/etc/hostapd/hostapd_spaceify.conf\n${end_spaceify}" )	# append new value
	printf "$dhostapd" > /etc/default/hostapd
else																						# comment configuration if hostpad is installed and it has hostapd_spaceify.conf configuration
	hpd=$( dpkg-query -W -f='${Status}\n' hostapd )
	hpd=$( echo "$hpd" | sed -n '/installed/{p;q;}' )
	if [[ "$hpd" != "" ]]; then
		service hostapd stop																# stop hostapd
		sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/hostapd > /dev/null 2>&1 || true	# restore previous configuration
	fi
fi

	# ----- /etc/monit/monitrc ----- #

#sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/monit/monitrc							# remove Spaceify's previous entries

#monit=$(</etc/monit/monitrc)
#monit=$( echo "${monit}\n\n${start_spaceify}\n" )											# append new configuration
#monit=$( echo "${monit}include /var/lib/spaceify/monit/spaceify.conf\n" )
#monit=$( echo "${monit}${end_spaceify}\n" )
#printf "$monit" > /etc/monit/monitrc

core_port=$(cat /var/lib/spaceify/code/www/libs/config.json | grep "CORE_PORT" | sed 's/[^0-9]*//g')
core_port=$(echo $core_port | awk -F ' ' '{print $1}')
sed -i "s/%1/${core_port}/" /etc/monit/conf.d/spaceify.conf									# change the monitored port to the configuration

	# ----- /etc/udhcpd.conf, /etc/default/udhcpd ----- #

mv /etc/udhcpd.conf /etc/udhcpd.conf.original > /dev/null 2>&1 || true						# store existing configuration
mv /etc/default/udhcpd /etc/default/udhcpd.original > /dev/null 2>&1 || true

dhcpd="start 10.0.0.2\n"
dhcpd="${dhcpd}end 10.0.0.254\n"
dhcpd="${dhcpd}interface ${wlan}\n"
dhcpd="${dhcpd}opt dns 10.0.0.1 10.0.0.1\n"
dhcpd="${dhcpd}option dns 10.0.0.1\n"
dhcpd="${dhcpd}opt router 10.0.0.1\n"
dhcpd="${dhcpd}option subnet 255.255.255.0\n"
dhcpd="${dhcpd}option lease 7200\n"
dhcpd="${dhcpd}option domain spaceify.net\n"
dhcpd="${dhcpd}opt broadcast 10.0.0.255\n\n"
printf "$dhcpd" > /etc/udhcpd.conf

dhcpd="DHCPD_ENABLED=\"yes\"\n"
dhcpd="${dhcpd}DHCPD_OPTS=\"-S\"\n\n"
printf "$dhcpd" > /etc/default/udhcpd

	# ----- /etc/init/spaceify.conf, /etc/init/spaceifydns.conf, /etc/init/spaceifyipt.conf ----- #
cp /var/lib/spaceify/data/upstart/* /etc/init/ > /dev/null 2>&1 || true						# Copy upstart scripts to /etc/init/

ln -s /etc/init/spaceify.conf /etc/init.d/spaceify > /dev/null 2>&1 || true					# Create symbolic links for Spaceify's services
ln -s /etc/init/spaceifydns.conf /etc/init.d/spaceifydns > /dev/null 2>&1 || true
ln -s /etc/init/spaceifyipt.conf /etc/init.d/spaceifyipt > /dev/null 2>&1 || true
ln -s /etc/init/spaceifyhttp.conf /etc/init.d/spaceifyhttp > /dev/null 2>&1 || true
ln -s /etc/init/spaceifyappman.conf /etc/init.d/spaceifyappman > /dev/null 2>&1 || true

sed -i "s/interface1/${eth}/g" /etc/init/spaceifydns.conf									# Replace the real network interface names to the dns service script
sed -i "s/interface2/${wlan}/g" /etc/init/spaceifydns.conf

# ----------
# ----------
# ----------
# ----------
# ---------- EXECUTE COMMANDS ---------- #

	# ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
	# Old installation packages might not get network up. Try to restart it here.
	# This is for updating edge below 0.5.0 to 0.5.0 or above. Remove this after couple of updates.
pvs="/var/lib/spaceify/data/db/previous_edge_version"
if [ -f $pvs ]; then pv=$(< $pvs); else pv="00000.00000.00000"; fi
rm $pvs > /dev/null 2>&1
ping -c 1 8.8.8.8 > /dev/null 2>&1
if [ $? != 0 ] || [[ "$pv" < "00000.00005.00000" ]]; then

	if [[ -n $(service network-manager status |& grep unrecognized) ]]; then

		ifdown $eth > /dev/null 2>&1 || true
		ifup $eth > /dev/null 2>&1 || true

	elif [[ -n $(service network-manager status |& grep running) ]]; then

		service network-manager restart > /dev/null 2>&1 || true

		resolvconf -u

	fi

	. /var/lib/spaceify/data/scripts/wait_network.sh 0 300 50 "Please wait, restarting network."

	if [ $? -ne 0 ]; then
		printf "\e[41mThe installation is aborted because restarting the network failed. Run 'apt-get purge spaceify' to remove the incomplete installation. NOTICE: Save files that you want to preserve before removing the installation.\e[0m\n\n"
		exit 1
	else
		printf "The network is restarted. Continuing the installation.\n"
	fi

fi
	# ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !

	# ----- Update node.js to the latest stable release ----- #
printf "\n\e[4mUpdating Node.js\e[0m\n\n"

npm install npm -g
npm cache clear -f
npm install -g n
n 5.10.1

	# ----- Spaceify's DNS server must be on and other DNS mechanisms off ----- #
		# - remove Spaceify's previous entries - #
if [ -f /etc/NetworkManager/NetworkManager.conf ]; then
	sed -i -e "s/${comm_out_spaceify}//g" /etc/NetworkManager/NetworkManager.conf > /dev/null 2>&1 || true
fi

if [ -f /etc/dhcp/dhclient.conf ]; then
	sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/dhcp/dhclient.conf > /dev/null 2>&1 || true
fi

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/resolvconf/resolv.conf.d/base > /dev/null 2>&1 || true

		# - disable dnsmasq - #
if [ -f /etc/NetworkManager/NetworkManager.conf ]; then
	netm=$( sed -i -e "/dns/ s/^/${comm_out_spaceify}/" /etc/NetworkManager/NetworkManager.conf )
fi

		# - keep localhost - #
if [ -f /etc/dhcp/dhclient.conf ]; then
	hdh=$(grep "prepend domain-name-servers" /etc/dhcp/dhclient.conf)

	if [ -n "$hdh" ]; then
		dhcl=$( sed -e "/prepend domain-name-servers/ s/^/${comm_out_spaceify}/" /etc/dhcp/dhclient.conf )
		dhcl=$( echo "$dhcl" | sed "/prepend domain-name-servers/a ${start_spaceify}\nprepend domain-name-servers 127.0.0.1;\n${end_spaceify}" )
	else
		dhcl=$(< /etc/dhcp/dhclient.conf)
		dhcl="${dhcl}\n${start_spaceify}\nprepend domain-name-servers 127.0.0.1;\n${end_spaceify}"
	fi

	printf "$dhcl" > /etc/dhcp/dhclient.conf
fi

		# - direct to localhost - #
base=$( sed -e "s/^/${comm_out_spaceify}/" /etc/resolvconf/resolv.conf.d/base )
base="${base}\n${start_spaceify}\nnameserver 127.0.0.1\n${end_spaceify}"
printf "$base" > /etc/resolvconf/resolv.conf.d/base

		# - try to apply the changes - #
if [[ -n $(service network-manager status |& grep unrecognized) ]]; then

	ifdown $eth > /dev/null 2>&1 || true
	ifup $eth > /dev/null 2>&1 || true

elif [[ -n $(service network-manager status |& grep running) ]]; then

	service network-manager restart > /dev/null 2>&1 || true

	resolvconf -u

fi

. /var/lib/spaceify/data/scripts/wait_network.sh 0 300 50 "Please wait, restarting network."

if [ $? -ne 0 ]; then
	printf "\e[41mThe installation is aborted because restarting the network failed. Run 'apt-get purge spaceify' to remove the incomplete installation. NOTICE: Save files that you want to preserve before removing the installation.\e[0m\n\n"
	exit 1
else
	printf "The network is restarted. Continuing the installation.\n"
fi

		# - Start Spaceify's DNS server - #
service spaceifydns restart > /dev/null 2>&1 || true

	# ----- Add custom iptables chains for Spaceify - To avoid duplicates, delete existing chains first ----- #

		# - -- Delete mangle chain -- - #
#/sbin/iptables -t mangle -D PREROUTING -j Spaceify-mangle > /dev/null 2>&1 || true
#/sbin/iptables -t mangle -F Spaceify-mangle > /dev/null 2>&1 || true
#/sbin/iptables -t mangle -X Spaceify-mangle > /dev/null 2>&1 || true
#/sbin/iptables -t nat -D PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1 > /dev/null 2>&1 || true
#/sbin/iptables -t nat -D PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.1 > /dev/null 2>&1 || true
#/sbin/iptables -t filter -D FORWARD -m mark --mark 99 -j DROP > /dev/null 2>&1 || true

		# - -- Delete HTTP filter chain, NAT chain and redirect chain -- - #
/sbin/iptables -t nat -D PREROUTING -j Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true
/sbin/iptables -t nat -D POSTROUTING -j Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
/sbin/iptables -t nat -F Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
/sbin/iptables -t nat -X Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
/sbin/iptables -t nat -F Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true
/sbin/iptables -t nat -X Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true

		# - -- Delete HTTPS filter chain, NAT chain and redirect chain -- - #
/sbin/iptables -t nat -D PREROUTING -j Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true
/sbin/iptables -t nat -D POSTROUTING -j Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
/sbin/iptables -t nat -F Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
/sbin/iptables -t nat -X Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
/sbin/iptables -t nat -F Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true
/sbin/iptables -t nat -X Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true

		# - -- Delete Docker container connection chains -- - #
iptables-save | grep -v -- '-j Spaceify-Nat-Connections' | iptables-restore
/sbin/iptables -t nat -F Spaceify-Nat-Connections > /dev/null 2>&1 || true
/sbin/iptables -t nat -X Spaceify-Nat-Connections > /dev/null 2>&1 || true
/sbin/iptables -t nat -D POSTROUTING -s 172\.17\.0\.0\/16 ! -o docker0 -j MASQUERADE > /dev/null 2>&1 || true

/sbin/iptables -t filter -D FORWARD -j Spaceify-Filter-Connections > /dev/null 2>&1 || true
/sbin/iptables -t filter -F Spaceify-Filter-Connections > /dev/null 2>&1 || true
/sbin/iptables -t filter -X Spaceify-Filter-Connections > /dev/null 2>&1 || true

		# - -- Delete Application Manager rules -- - #
#/sbin/iptables -D INPUT -p tcp -s localhost --dport $appman_port -j ACCEPT > /dev/null 2>&1 || true
#/sbin/iptables -D INPUT -p tcp --dport $appman_port -j DROP > /dev/null 2>&1 || true

		# - ++ Add mangle chain ++ - #
#/sbin/iptables -t mangle -N Spaceify-mangle
#/sbin/iptables -t mangle -A PREROUTING -j Spaceify-mangle
#/sbin/iptables -t mangle -A Spaceify-mangle -i docker0 -j RETURN
#/sbin/iptables -t mangle -A Spaceify-mangle -j MARK --set-mark 99
#/sbin/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1
#/sbin/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.1
#/sbin/iptables -t filter -A FORWARD -m mark --mark 99 -j DROP

		# - ++ Add HTTP filter chain, NAT chain and redirect chain ++ - #
/sbin/iptables -t nat -N Spaceify-HTTP-Nat-Redir
/sbin/iptables -t nat -A PREROUTING -j Spaceify-HTTP-Nat-Redir
/sbin/iptables -t nat -A Spaceify-HTTP-Nat-Redir -d 10.0.0.1/32 -j ACCEPT
/sbin/iptables -t nat -A Spaceify-HTTP-Nat-Redir -s 10.0.0.0/24 -p tcp --dport 80 -j REDIRECT --to-port 8888

/sbin/iptables -t nat -N Spaceify-HTTP-Nat-Masq
/sbin/iptables -t nat -A POSTROUTING -j Spaceify-HTTP-Nat-Masq
/sbin/iptables -t nat -A Spaceify-HTTP-Nat-Masq -o "${eth}" -j MASQUERADE 

		# - ++ Add HTTPS filter chain, NAT chain and redirect chain ++ - #
/sbin/iptables -t nat -N Spaceify-HTTPS-Nat-Redir
/sbin/iptables -t nat -A PREROUTING -j Spaceify-HTTPS-Nat-Redir
/sbin/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -d 10.0.0.1/32 -j ACCEPT
/sbin/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -s 10.0.0.0/24 -p tcp --dport 443 -j REDIRECT --to-port 8889

/sbin/iptables -t nat -N Spaceify-HTTPS-Nat-Masq
/sbin/iptables -t nat -A POSTROUTING -j Spaceify-HTTPS-Nat-Masq
/sbin/iptables -t nat -A Spaceify-HTTPS-Nat-Masq -o "${eth}" -j MASQUERADE 

		# - ++ Add Docker container connection chains ++ - #
/sbin/iptables -t nat -N Spaceify-Nat-Connections
/sbin/iptables -t nat -A PREROUTING -j Spaceify-Nat-Connections
/sbin/iptables -t nat -A PREROUTING -m addrtype --dst-type LOCAL -j Spaceify-Nat-Connections
/sbin/iptables -t nat -A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j Spaceify-Nat-Connections
/sbin/iptables -t nat -A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE

/sbin/iptables -t filter -N Spaceify-Filter-Connections
/sbin/iptables -t filter -A FORWARD -j Spaceify-Filter-Connections

		# - ++ Add Application Manager rules ++ - #
#/sbin/iptables -A INPUT -p tcp -s localhost --dport $appman_port -j ACCEPT
#/sbin/iptables -A INPUT -p tcp --dport $appman_port -j DROP

	# ----- Enable IP forwarding ----- #

echo 1 > /proc/sys/net/ipv4/ip_forward

	# ----- Certificates and keys ----- #

mkdir /var/lib/spaceify/code/www/ > /dev/null 2>&1 || true
mkdir /var/lib/spaceify/data/tls/ > /dev/null 2>&1 || true

cp /etc/squid3/certs/spaceifyCA/spaceify.crt /var/lib/spaceify/code/www/ > /dev/null 2>&1 || true	# Copy the CA certificate to the www directory

if [ ! -f /var/lib/spaceify/data/tls/server.crt ] ||										# Remake server key and certificate if necessary
   [ ! -f /var/lib/spaceify/data/tls/server.key ]; then

	printf "\n\e[4mCreating server key for the edge node\e[0m\n\n"

	. /var/lib/spaceify/data/scripts/makeserver.sh "/var/lib/spaceify/data/tls/" "Edge server"

fi

	# ----- File permissions etc. ----- #

mkdir -p /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true							# dhcp server directories/files
chmod -R 0664 /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true
# chown - R root:spaceify /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true

mkdir -p /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true							# iptables directories/files
chmod -R 0664 /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true
# chown - R root:spaceify /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true

mkdir -p /var/lib/spaceify/data/dev > /dev/null 2>&1 || true								# FIFO for iptables writer
chmod -R 0700 /var/lib/spaceify/data/dev > /dev/null 2>&1 || true
chown - R root:root /var/lib/spaceify/data/dev > /dev/null 2>&1 || true

chmod 0755 /usr/bin/spm > /dev/null 2>&1 || true											# Spaceify Packet Manager script

chmod 0755 /var/lib/spaceify/data/scripts/remove_containers.sh > /dev/null 2>&1 || true		# A script to stop and remove running containers and images
chmod 0755 /var/lib/spaceify/data/scripts/remove_images.sh > /dev/null 2>&1 || true

rm /var/log/spaceifyappman.log > /dev/null 2>&1 || true										# Log files are in /var/lib/spaceify/data/logs
rm /var/log/spaceifyconhub.log > /dev/null 2>&1 || true										# and these old log files are not needed anymore
rm /var/log/spaceifydns.log > /dev/null 2>&1 || true
rm /var/log/spaceifyhttp.log > /dev/null 2>&1 || true
rm /var/log/spaceifyipt.log > /dev/null 2>&1 || true
rm /var/log/spaceify.log > /dev/null 2>&1 || true

chmod 0755 /etc/cron.hourly/spaceifylog > /dev/null 2>&1 || true							# Check log sizes hourly

# ----------
# ----------
# ----------
# ----------
# ---------- Install the required node.js modules (versions are defined in the package.json) ---------- #
printf "\n\e[4mInstalling Node.js packages\e[0m\n\n"

npm install -g node-gyp
cd /var/lib/spaceify/code
npm install

# ----------
# ----------
# ----------
# ----------
# ---------- Docker image for different distributions ---------- #
printf "\n\e[4mSearching suitable Docker image for this distribution\e[0m\n"

distro=$(uname -a)
if [[ -n $(uname -a |& grep -i "ubun") ]]; then
	distro=$(cat /var/lib/spaceify/code/www/libs/config.json | grep "UBUNTU_DISTRO_NAME" | sed 's/[^a-z]*//g')
	distro_image_name=$(cat /var/lib/spaceify/code/www/libs/config.json | grep "UBUNTU_DOCKER_IMAGE" | sed 's/[^a-z]*//g')
elif [[ -n $(uname -a |& grep -i "rasp") ]]; then
	distro=$(cat /var/lib/spaceify/code/www/libs/config.json | grep "RASPBIAN_DISTRO_NAME" | sed 's/[^a-z]*//g')
	distro_image_name=$(cat /var/lib/spaceify/code/www/libs/config.json | grep "RASPBIAN_DOCKER_IMAGE" | sed 's/[^a-z]*//g')
fi
$(sqlite3 $dbpath "UPDATE information SET distribution='$distro'")

if_path="/var/lib/spaceify/data/docker/$distro"
if_version="$if_path/image_version"
if_list="$if_path/image_versions"																# Latest image version list is supplied with the package

release_version=$(sqlite3 $dbpath "SELECT release_version FROM information;")					# Get the version this package requires

new_row=$(grep "^${release_version}:.*$" $if_list)												# The filename of the new image file
new_image=$(echo $new_row | awk -F : '{print $2}')
new_version=$(echo $new_row | awk -F : '{print $1}')

if [ -f $if_version ]; then image_version=$(< $if_version); else image_version=0; fi			# Image filename of (possibly) existing image file
old_row=$(grep "^${image_version}:.*$" $if_list)
old_image=$(echo $old_row | awk -F : '{print $2}')

if [ -f "$if_path/$old_image" ]; then old_image_exists=1; else old_image_exists=0; fi			# Check that the file really exists

#if [ $old_image_exists == 0 ] && [ "$new_image" == "" ]; then
#
#	# # # Build and export
#	# # # Existing image file is not available and downloading new file from spaceify.org is not possibile
#
#	cd /var/lib/spaceify/data/docker
#
#	image_name=$(echo $new_image | awk -F "." '{print $1}')
#
#	printf "\n\e[32mExisting image was not found and can not be downloaded. A new image is now being build.\e[0m\n\n"
#	docker build --no-cache --rm -t $distro_image_name . # > /dev/null 2>&1 || true
#
#	printf "\n\n\e[32mExporting the image.\e[0m\n"
#	ID=$(docker run -d $distro_image_name /bin/bash) > /dev/null 2>&1 || true
#	sudo docker export $ID > "$if_path/$image_name.tar" > /dev/null 2>&1 || true
#	sudo docker stop $ID > /dev/null 2>&1 || true
#	sudo docker rm -f $ID > /dev/null 2>&1 || true
#
#	gzip "$if_path/$image_name.tar" > /dev/null 2>&1 || true
#	mv "$if_path/$image_name.tar.gz" "$if_path/$image_name.tgz" > /dev/null 2>&1 || true
#
#elif [ $old_image_exists == 1 ] && [ "$old_image" == "$new_image" ]; then
if [ $old_image_exists == 1 ] && [ "$old_image" == "$new_image" ]; then

	# # # Import
	# # # Use existing image

	printf "\n\e[32mExisting, compatible image was found. Importing the image.\e[0m\n"
	cat "$if_path/$new_image" | sudo docker import - $distro_image_name > /dev/null

else

	# # # Load and import
	# # # The image must be loaded from spaceify.org before it can be imported

	rm "$if_path/$distro_image_name"* > /dev/null 2>&1 || true

	printf "\n\e[32mExisting, compatible image was not found. The image is downloaded from remote server.\e[0m\n"
	curl -o "$if_path/$new_image" "https://spaceify.org/downloads/$new_image"

	if [ -f "$if_path/$new_image" ]; then
		printf "\n\e[32mImporting the image.\e[0m\n"
		cat "$if_path/$new_image" | sudo docker import - $distro_image_name > /dev/null
	fi

fi

ubun=$( echo $(docker images) | sed -n "/$distro_image_name/{p;q;}" )
if [ -z "$ubun" ]; then
	printf "\n\e[41mThe installation is aborted because the required $distro_image_name Docker image doesn't exist. Run 'apt-get purge spaceify' to remove the incomplete installation. NOTICE: Save files that you want to preserve before removing the installation.\e[0m\n\n"
	exit 1
else
	printf $new_version > $if_version															# Update the version file
fi

# ----------
# ----------
# ----------
# ----------
# ---------- Registration - use existing information or create new. ---------- #
printf "\n\e[4mCreating registration information for this edge node\e[0m\n"

$(node /var/lib/spaceify/code/edgespaceifynet.js "createEdgeId")

# ----------
# ----------
# ----------
# ----------
# ---------- Start services ---------- #
printf "\n\e[4mRestarting edge nodes network and Spaceify's services\e[0m\n"

#service udhcpd restart

printf "\nTrying to restart network. If the network does not restart, please do it manually or reboot the computer.\n"
if [[ -n $(service network-manager status |& grep unrecognized) ]]; then

	ifdown $eth > /dev/null 2>&1 || true
	ifup $eth > /dev/null 2>&1 || true

else
	service network-manager restart > /dev/null 2>&1 || true

	resolvconf -u

	ifconfig ${wlan} down
	ifconfig ${wlan} 10.0.0.1 netmask 255.255.255.0 up
fi

if [[ "$is_internal" -eq "1" ]]; then
	service hostapd restart > /dev/null 2>&1 || true
fi

	# -- Remove all remaining Docker rules (--iptables=false)
#iptables-save | grep -v -- '-j DOCKER' | iptables-restore
#iptables-save | grep -v -- 'docker0' | iptables-restore
#/sbin/iptables -t nat -F DOCKER > /dev/null 2>&1 || true
#/sbin/iptables -t nat -X DOCKER > /dev/null 2>&1 || true
#service docker restart > /dev/null 2>&1 || true

printf "\nRestarting the services.\n"
service spaceifydns restart > /dev/null 2>&1 || true
service spaceifyipt restart > /dev/null 2>&1 || true
service spaceify restart > /dev/null 2>&1 || true
service spaceifyappman restart > /dev/null 2>&1 || true
service spaceifyhttp restart > /dev/null 2>&1 || true

service monit restart > /dev/null 2>&1 || true

# ----------
# ----------
# ----------
# ----------
# ---------- Reinstall packages from Spaceify's previous installation ---------- #
. /var/lib/spaceify/data/scripts/install_packages.sh

# ----------
# ----------
# ----------
# ----------
# ---------- Spaceify is now installed ---------- #
versions=$(< /var/lib/spaceify/versions)													# Get the current version string
vs=$(echo $versions | awk -F : '{print $2}')

printf "\n\e[42mSpaceify version $vs is now installed\e[0m\n\n"

# Script is found here after installation, if testing is required (eg. finding where the script fails): /var/lib/dpkg/info/spaceify.postinst
# After changing the script run dpkg-reconfigure spaceify
