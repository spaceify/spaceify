#!/bin/bash

#############
# CONSTANTS #
#############
start_spaceify="# Added by Spaceify"
end_spaceify="# Added by Spaceify ends"
comm_out_spaceify="# Commented out by Spaceify: "

############
# DATABASE #
############
. /var/lib/spaceify/data/scripts/database.sh

#######################
# DEBCONF - GET INPUT #
#######################
. /var/lib/spaceify/data/scripts/input.sh

eth=$(</var/lib/spaceify/data/interfaces/ethernet)
wlan=$(</var/lib/spaceify/data/interfaces/wlan)
is_internal=$(</var/lib/spaceify/data/interfaces/is_internal)

################################
# MODIFY CONFIGURATION SCRIPTS #
################################

# ----- /etc/network/interfaces - give ip to wlan0 (or what adapter names user selected) ----- #

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/network/interfaces > /dev/null 2>&1 || true	# remove Spaceify's previous comments/entries

sed -i "/${wlan}/,/^$/s/^/${comm_out_spaceify}&/g" /etc/network/interfaces					# comment out existing wlan (range: first line with string $wlan until empty line)

wlan_conf=$(</etc/network/interfaces)
wlan_conf=$( echo "${wlan_conf}\n\n${start_spaceify}\n" )									# append new configuration
wlan_conf=$( echo "${wlan_conf}auto ${wlan}\n" )
wlan_conf=$( echo "${wlan_conf}iface ${wlan} inet static\n" )
wlan_conf=$( echo "${wlan_conf}address 10.0.0.1\n" )
wlan_conf=$( echo "${wlan_conf}netmask 255.255.255.0\n" )
wlan_conf=$( echo "${wlan_conf}${end_spaceify}" )
printf "$wlan_conf" > /etc/network/interfaces

# ----- /etc/default/docker ----- #

sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/docker > /dev/null 2>&1 || true	# remove Spaceify's previous entries

if [ -s /etc/default/docker ]; then
	docker_conf=$(</etc/default/docker)
else
	docker_conf=""
fi

docker_conf=$( echo "${docker_conf}\n\n${start_spaceify}\n" )
docker_conf=$( echo "${docker_conf}DOCKER_OPTS=\"--dns 10.0.0.1\"\n" )
docker_conf=$( echo "${docker_conf}${end_spaceify}" )
printf "$docker_conf" > /etc/default/docker

# ----- /etc/rc.local ----- #

	# Remove Spaceify's previous iptables entries
sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/rc.local

# Create mangle chain
#rclocal1="\/sbin\/iptables -t mangle -N Spaceify-mangle"
#rclocal2="\/sbin\/iptables -t mangle -A PREROUTING -j Spaceify-mangle"
#rclocal3="\/sbin\/iptables -t mangle -A Spaceify-mangle -i docker0 -j RETURN"
#rclocal4="\/sbin\/iptables -t mangle -A Spaceify-mangle -j MARK --set-mark 99"
#rclocal5="\/sbin\/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10\.0\.0\.1"
#rclocal6="\/sbin\/iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10\.0\.0\.1"
#rclocal7="\/sbin\/iptables -t filter -A FORWARD -m mark --mark 99 -j DROP"

#mangle_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"
mangle_chain=""

	# -- create HTTP filter chain, NAT chain and redirect chain --#
rclocal1="\/sbin\/iptables -t nat -N Spaceify-HTTP-Nat-Redir"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-HTTP-Nat-Redir"
rclocal3="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Redir -d 10\.0\.0\.1\/32 -j ACCEPT"
rclocal4="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Redir -s 10\.0\.0\.0\/24 -p tcp --dport 80 -j REDIRECT --to-port 8888"

rclocal5="\/sbin\/iptables -t nat -N Spaceify-HTTP-Nat-Masq"
rclocal6="\/sbin\/iptables -t nat -A POSTROUTING -j Spaceify-HTTP-Nat-Masq"
rclocal7="\/sbin\/iptables -t nat -A Spaceify-HTTP-Nat-Masq -o "${eth}" -j MASQUERADE" 

http_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

	# -- create HTTPS filter chain, NAT chain and redirect chain --#
rclocal1="\/sbin\/iptables -t nat -N Spaceify-HTTPS-Nat-Redir"
rclocal2="\/sbin\/iptables -t nat -A PREROUTING -j Spaceify-HTTPS-Nat-Redir"
rclocal3="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -d 10\.0\.0\.1\/32 -j ACCEPT"
rclocal4="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Redir -s 10\.0\.0\.0\/24 -p tcp --dport 443 -j REDIRECT --to-port 8889"

rclocal5="\/sbin\/iptables -t nat -N Spaceify-HTTPS-Nat-Masq"
rclocal6="\/sbin\/iptables -t nat -A POSTROUTING -j Spaceify-HTTPS-Nat-Masq"
rclocal7="\/sbin\/iptables -t nat -A Spaceify-HTTPS-Nat-Masq -o "${eth}" -j MASQUERADE"

https_chain="$rclocal1\n$rclocal2\n$rclocal3\n$rclocal4\n$rclocal5\n$rclocal6\n$rclocal7\n"

	# -- append spaceify specific lines in rc.local before "exit 0" --#
sed -i "s/^exit.*/$start_spaceify\n$mangle_chain\n$http_chain\n$https_chain$end_spaceify\nexit 0/" /etc/rc.local

# ----- /etc/sysctl.conf - enable forwarding (for nat) ----- #

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/sysctl.conf > /dev/null 2>&1 || true

sysctl=$(</etc/sysctl.conf)
sysctl=$( echo "$sysctl" | sed "s/.*net.ipv4.ip_forward.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
sysctl=$( echo "${sysctl}\n\n${start_spaceify}\nnet.ipv4.ip_forward=1\n${end_spaceify}" > /dev/null 2>&1 || true )	# append new value
printf "$sysctl" > /etc/sysctl.conf

# ----- /etc/hostapd/hostapd_spaceify-ap.conf and /etc/default/hostapd - configure/enable AP ----- #

if [ "$is_internal" -eq "1" ]; then															# configure
	sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/hostapd > /dev/null 2>&1 || true

	hostap=$( echo "$start_spaceify\n" )
	hostap=$( echo "${hostap}interface=${wlan}\n" )
	hostap=$( echo "${hostap}driver=nl80211\n" )
	hostap=$( echo "${hostap}ssid=spaceify\n" )
	hostap=$( echo "${hostap}channel=6\n" )
	hostap=$( echo "${hostap}${end_spaceify}" )
	printf "$hostap" > /etc/hostapd/hostapd_spaceify.conf

	dhostapd=$(</etc/default/hostapd)
	dhostapd=$( echo "$dhostapd" | sed "s/.*DAEMON_CONF.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
	dhostapd=$( echo "${dhostapd}\n\n${start_spaceify}\nDAEMON_CONF=/etc/hostapd/hostapd_spaceify.conf\n${end_spaceify}" )	# append new value
	printf "$dhostapd" > /etc/default/hostapd
else																						# comment configuration if hostpad is installed and it has hostapd_spaceify.conf configuration
	hpd=$( dpkg-query -W -f='${Status}\n' hostapd )
	hpd=$( echo "$hpd" | sed -n '/installed/{p;q;}' )
	if [[ "$hpd" != "" ]]; then
		service hostapd stop																# stop hostapd
		sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/hostapd > /dev/null 2>&1 || true	# restore previous configuration
	fi
fi

# ----- /etc/monit/monitrc ----- #

#sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/monit/monitrc							# remove Spaceify's previous entries

#monit=$(</etc/monit/monitrc)
#monit=$( echo "${monit}\n\n${start_spaceify}\n" )											# append new configuration
#monit=$( echo "${monit}include /var/lib/spaceify/monit/spaceify.conf\n" )
#monit=$( echo "${monit}${end_spaceify}\n" )
#printf "$monit" > /etc/monit/monitrc

core_port="2497"
#sed -i "s/%1/${core_port}/" /var/lib/spaceify/monit/spaceify.conf							# change the port to monitor to configuration
sed -i "s/%1/${core_port}/" /etc/monit/conf.d/spaceify.conf

# ----- /etc/udhcpd.conf, /etc/default/udhcpd ----- #

mv /etc/udhcpd.conf /etc/udhcpd.conf.original > /dev/null 2>&1 || true						# store existing configuration
mv /etc/default/udhcpd /etc/default/udhcpd.original > /dev/null 2>&1 || true

dhcpd="start 10.0.0.2\n"
dhcpd="${dhcpd}end 10.0.0.254\n"
dhcpd="${dhcpd}interface ${wlan}\n"
dhcpd="${dhcpd}opt dns 10.0.0.1 10.0.0.1\n"
dhcpd="${dhcpd}option dns 10.0.0.1\n"
dhcpd="${dhcpd}opt router 10.0.0.1\n"
dhcpd="${dhcpd}option subnet 255.255.255.0\n"
dhcpd="${dhcpd}option lease 7200\n"
dhcpd="${dhcpd}option domain spaceify.net\n"
dhcpd="${dhcpd}opt broadcast 10.0.0.255\n\n"
printf "$dhcpd" > /etc/udhcpd.conf

dhcpd="DHCPD_ENABLED=\"yes\"\n"
dhcpd="${dhcpd}DHCPD_OPTS=\"-S\"\n\n"
printf "$dhcpd" > /etc/default/udhcpd

# ----- /etc/init/spaceify.conf, /etc/init/spaceifydns.conf, /etc/init/spaceifyipt.conf ----- #
cp /var/lib/spaceify/data/upstart/* /etc/init/ > /dev/null 2>&1 || true						# Copy upstart scripts to /etc/init/

ln -s /etc/init/spaceify.conf /etc/init.d/spaceify > /dev/null 2>&1 || true					# Create symbolic links for Spaceify's services
ln -s /etc/init/spaceifydns.conf /etc/init.d/spaceifydns > /dev/null 2>&1 || true
ln -s /etc/init/spaceifyipt.conf /etc/init.d/spaceifyipt > /dev/null 2>&1 || true

sed -i "s/interface1/${eth}/g" /etc/init/spaceify.conf
sed -i "s/interface2/${wlan}/g" /etc/init/spaceify.conf

sed -i "s/interface1/${eth}/g" /etc/init/spaceifydns.conf
sed -i "s/interface2/${wlan}/g" /etc/init/spaceifydns.conf

sed -i "s/interface1/${eth}/g" /etc/init/spaceifyipt.conf
sed -i "s/interface2/${wlan}/g" /etc/init/spaceifyipt.conf

####################
# EXECUTE COMMANDS #
####################

# ----- Spaceify's DNS server must be on and other DNS mechanisms off ----- #
	# -- remove Spaceify's previous entries -- #
if [ -f /etc/NetworkManager/NetworkManager.conf ]; then
	sed -i -e "s/${comm_out_spaceify}//g" /etc/NetworkManager/NetworkManager.conf > /dev/null 2>&1 || true
fi

if [ -f /etc/dhcp/dhclient.conf ]; then
	sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/dhcp/dhclient.conf > /dev/null 2>&1 || true
fi

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/resolvconf/resolv.conf.d/base > /dev/null 2>&1 || true

	# -- disable dnsmasq -- #
if [ -f /etc/NetworkManager/NetworkManager.conf ]; then
	netm=$( sed -i -e "/dns/ s/^/${comm_out_spaceify}/" /etc/NetworkManager/NetworkManager.conf )
fi

	# -- keep localhost -- #
if [ -f /etc/dhcp/dhclient.conf ]; then
	hdh=$(grep "prepend domain-name-servers" /etc/dhcp/dhclient.conf)

	if [ -n "$hdh" ]; then
		dhcl=$( sed -e "/prepend domain-name-servers/ s/^/${comm_out_spaceify}/" /etc/dhcp/dhclient.conf )
		dhcl=$( echo "$dhcl" | sed "/prepend domain-name-servers/a ${start_spaceify}\nprepend domain-name-servers 127.0.0.1;\n${end_spaceify}" )
	else
		dhcl=$(< /etc/dhcp/dhclient.conf)
		dhcl="${dhcl}\n${start_spaceify}\nprepend domain-name-servers 127.0.0.1;\n${end_spaceify}"
	fi

	printf "$dhcl" > /etc/dhcp/dhclient.conf
fi

	# -- direct to localhost -- #
base=$( sed -e "s/^/${comm_out_spaceify}/" /etc/resolvconf/resolv.conf.d/base )
base="${base}\n${start_spaceify}\nnameserver 127.0.0.1\n${end_spaceify}"
printf "$base" > /etc/resolvconf/resolv.conf.d/base

	# -- try to apply the changes -- #
if [[ -n $(service network-manager status |& grep unrecognized) ]]; then
	resolvconf -u
elif [[ -n $(service network-manager status |& grep running) ]]; then
	service network-manager restart

	resolvconf -u
fi

	# -- interface must be up -- #
x=300
printf "\nWaiting for maximum of $x seconds for the network interface $eth to come up.\n"
ping -c 1 -W 1 8.8.8.8  > /dev/null 2>&1
while [ $? -ne 0 ]; do
	let x-=1
	printf "%d %s %4s\r" $x "seconds remaining." ""

	if [ $x -eq 0 ]; then
		break
	fi

	sleep 1
	ping -c 1 8.8.8.8 > /dev/null 2>&1
done

if [[ $x -eq 0 ]]; then
	. /var/lib/spaceify/data/scripts/cleanup_installation.sh "remove"
	printf "\nFailed to get the interface up. Run 'apt-get --purge remove Spaceify' to remove incomplete installation. Exiting the installation.\n\n"
	exit 1
else
	printf "\nThe interface is up. Continuing the installation.\n\n"
fi

	# -- start the Spaceify DNS server -- #
service spaceifydns restart > /dev/null 2>&1 || true

# ----- Add custom iptables chains for Spaceify ----- #

# To avoid duplicates delete existing rules
iptables -t mangle -D PREROUTING -j Spaceify-mangle > /dev/null 2>&1 || true
iptables -t mangle -F Spaceify-mangle > /dev/null 2>&1 || true
iptables -t mangle -X Spaceify-mangle > /dev/null 2>&1 || true
iptables -t nat -D PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1 > /dev/null 2>&1 || true
iptables -t nat -D PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.1 > /dev/null 2>&1 || true
iptables -t filter -D FORWARD -m mark --mark 99 -j DROP > /dev/null 2>&1 || true

iptables -t nat -D PREROUTING -j Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true
iptables -t nat -D POSTROUTING -j Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -F Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -X Spaceify-HTTP-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -F Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true
iptables -t nat -X Spaceify-HTTP-Nat-Redir > /dev/null 2>&1 || true

iptables -t nat -D PREROUTING -j Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true
iptables -t nat -D POSTROUTING -j Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -F Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -X Spaceify-HTTPS-Nat-Masq > /dev/null 2>&1 || true
iptables -t nat -F Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true
iptables -t nat -X Spaceify-HTTPS-Nat-Redir > /dev/null 2>&1 || true

# Mangle chain
#iptables -t mangle -N Spaceify-mangle
#iptables -t mangle -A PREROUTING -j Spaceify-mangle
#iptables -t mangle -A Spaceify-mangle -i docker0 -j RETURN
#iptables -t mangle -A Spaceify-mangle -j MARK --set-mark 99
#iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1
#iptables -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.1
#iptables -t filter -A FORWARD -m mark --mark 99 -j DROP

# HTTP filter chain, NAT chain and redirect chain
iptables -t nat -N Spaceify-HTTP-Nat-Redir
iptables -t nat -A PREROUTING -j Spaceify-HTTP-Nat-Redir
iptables -t nat -A Spaceify-HTTP-Nat-Redir -d 10.0.0.1/32 -j ACCEPT
iptables -t nat -A Spaceify-HTTP-Nat-Redir -s 10.0.0.0/24 -p tcp --dport 80 -j REDIRECT --to-port 8888

iptables -t nat -N Spaceify-HTTP-Nat-Masq
iptables -t nat -A POSTROUTING -j Spaceify-HTTP-Nat-Masq
iptables -t nat -A Spaceify-HTTP-Nat-Masq -o "${eth}" -j MASQUERADE 

# HTTPS filter chain, NAT chain and redirect chain
iptables -t nat -N Spaceify-HTTPS-Nat-Redir
iptables -t nat -A PREROUTING -j Spaceify-HTTPS-Nat-Redir
iptables -t nat -A Spaceify-HTTPS-Nat-Redir -d 10.0.0.1/32 -j ACCEPT
iptables -t nat -A Spaceify-HTTPS-Nat-Redir -s 10.0.0.0/24 -p tcp --dport 443 -j REDIRECT --to-port 8889

iptables -t nat -N Spaceify-HTTPS-Nat-Masq
iptables -t nat -A POSTROUTING -j Spaceify-HTTPS-Nat-Masq
iptables -t nat -A Spaceify-HTTPS-Nat-Masq -o "${eth}" -j MASQUERADE 

# ----- Enable IP forwarding ----- #

echo 1 > /proc/sys/net/ipv4/ip_forward

# ----- Certificates and keys ----- #

# Copy certificates and keys to Spaceify's folders from Squid's folders
mkdir /var/lib/spaceify/code/www/ > /dev/null 2>&1 || true
mkdir /var/lib/spaceify/data/tls/ > /dev/null 2>&1 || true
cp /etc/squid3/certs/spaceifyCA/spaceify.crt /var/lib/spaceify/code/www/ > /dev/null 2>&1 || true
cp /etc/squid3/certs/server.crt /var/lib/spaceify/data/tls/ > /dev/null 2>&1 || true
cp /etc/squid3/certs/server.key /var/lib/spaceify/data/tls/ > /dev/null 2>&1 || true

# ----- File permissions etc. ----- #

mkdir -p /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true							# dhcp server directories/files
chmod -R 0664 /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true
# chown - R root:spaceify /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true

mkdir -p /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true							# iptables directories/files
chmod -R 0664 /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true
# chown - R root:spaceify /var/lib/spaceify/data/ipt-data > /dev/null 2>&1 || true

mkdir -p /var/lib/spaceify/data/dev > /dev/null 2>&1 || true								# FIFO for iptables writer
chmod -R 0700 /var/lib/spaceify/data/dev > /dev/null 2>&1 || true
chown - R root:root /var/lib/spaceify/data/dev > /dev/null 2>&1 || true

chmod 0755 /usr/bin/spm  > /dev/null 2>&1 || true											# Spaceify Packet Manager script

chmod 0755 /var/lib/spaceify/data/scripts/remove_containers.sh > /dev/null 2>&1 || true		# a script to stop and remove running containers and images
chmod 0755 /var/lib/spaceify/data/scripts/remove_images.sh > /dev/null 2>&1 || true

# ----- Update node.js to the latest stable release and install the required node.js modules (versions are defined in package.json) ----- #
# npm cache clear -f
# npm install -g n
# n stable

npm install -g node-gyp
cd /var/lib/spaceify/code
npm install

# ----- Create and initialize Docker image ----- #
work_path="/tmp/docimg/"
installed_file="/var/lib/spaceify/data/docker/installed_version"

in=$(wget -qO- http://spaceify.org/downloads/image_version)									# Has the spaceify.org some version of the image available
if [ -z "$in" ]; then in=0; fi

il=0																						# Has the local computer some version of the image build/imported
if [ -s "$installed_file" ]; then il=$(< "$installed_file"); fi

ubun=$( echo $(docker images) | sed -n '/spaceifyubuntu/{p;q;}' )	# Is there really an build/imported image existing in the local computer
[ -z "$ubun" ] && su=0 || su=1

typeset -i in
typeset -i il

packages=()																					# Get the installed application packages
FILES=/var/lib/spaceify/data/installed/*
for f in $FILES; do
	if [[ "$f" != "/var/lib/spaceify/data/installed/*" ]] && [[ "$f" != "/var/lib/spaceify/data/installed/readme.txt" ]]; then
		packages+=("$f")
	fi
done
plen=${#packages[@]}

reinst=0

if (($su == 0 && $il == 0 && $in == 0)) || (($su == 0 && $il != 0 && $in == 0)); then
	# 1 --- Build : No existing image build/installed and image doesn't exist in spaceify.org
	cd /var/lib/spaceify/data/docker
	printf "\nBuilding a new Docker image...\n"
	docker build --no-cache --rm -t spaceifyubuntu . > /dev/null 2>&1 || true

	reinst=1
elif (($su == 0 && $il == 0 && $in != 0)) || (($su == 0 && $il != 0 && $in != 0)) || (($su != 0 && $il == 0 && $in != 0)) || (($su != 0 && $il != 0 && $in != 0 && $il != $in)); then
	# 2 ---Import : No existing image build/installed and image exists in spaceify.org
	# 3 ---Import + clean : Image exists but versions can't be compared OR image exists and versions can be compared

	docker rmi spaceifyubuntu > /dev/null 2>&1 || true

	printf "\nDownloading the latest Docker image...\n"
	curl -o ~/spaceifyubuntu.tgz http://spaceify.org/downloads/spaceifyubuntu.tgz

	if [ -s ~/spaceifyubuntu.tgz ]; then
		printf "\nImporting the Docker image...\n"
		cat ~/spaceifyubuntu.tgz | sudo docker import - spaceifyubuntu > /dev/null
		rm ~/spaceifyubuntu.tgz > /dev/null 2>&1 || true

		reinst=1
	fi
elif (($su != 0 && $il == 0 && $in == 0)) || (($su != 0 && $il != 0 && $in == 0)); then
	# 4 ---No operation : Image exists and spaceify.org doesn't have image
	:
fi

ubun=$( echo $(docker images) | sed -n '/spaceifyubuntu/{p;q;}' )
if [ -z "$ubun" ]; then
	printf "\nAborting installation because the required spaceifyubuntu Docker image doesn't exist.\n"
	exit 1
else
	if [[ $plen != 0 && $reinst != 0 ]]; then												# Reinstall applications if there were installed applications and a new image was created
		printf "\nReinstalling existing applications...\n"

		mkdir -p $work_path > /dev/null 2>&1 || true

		for (( i=0; i<${plen}; i++ )); do
			file=${packages[$i]##*/}
			cp "${packages[$i]}" "$work_path"
			spm install "$work_path$file"
		done

		rm -r $work_path > /dev/null 2>&1 || true
	fi

	printf "$in" > "$installed_file"
fi

# ----- Create user names and passwords for edge and admin ----- #

	# -- try to find previous registration (edge_id.uuid) --#
euuid=""
if [ -e /var/lib/spaceify/data/db/edge_id.uuid ]; then
	euuid=$(</var/lib/spaceify/data/db/edge_id.uuid)
elif [ -e /tmp/edge_id.uuid ]; then
	euuid=$(</tmp/edge_id.uuid)
fi

	# -- parse file content if edge_id.uuid was found --#
uuid=""
edge_password=""
if [[ "$euuid" != "" ]]; then
	OIFS="$IFS"
	IFS="," read -ra auuid <<< "$euuid"
	IFS="$OIFS"

	uuid="${auuid[0]}"
	edge_password="${auuid[1]}"
fi

	# -- if uuid exists edge is already registered. Don't register it again!!! --#
if [[ "$uuid" == "" ]]; then
	# try five times to register a new edge_id
	cnt=1
	while [ $cnt -lt 6 ]; do
		printf "\nTrying to register edge: attempt ${cnt} of 5...\n"

		data1=$(openssl rand -hex 4)
		data2=$(openssl rand -hex 2)
		data3=$(openssl rand -hex 2)
		data4i=$(openssl rand -hex 2)
		data4r=$(openssl rand -hex 6)
		uuid="${data1}-${data2}-${data3}-${data4i}-${data4r}"

		edge_password=$(openssl rand -hex 16)

		result=$(curl -d "eid=${uuid}&epw=${edge_password}" --location "http://spaceify.net/edge_register.php")
		if [[ "$result" == "" ]]; then
			echo "${uuid},${edge_password}" > /var/lib/spaceify/data/db/edge_id.uuid

			printf "\nEdge registered successfully with edge id ${uuid}.\nFile edge_id.uuid can be found here:\n"
			printf "/var/lib/spaceify/data/db\n"
			printf "Store this file in a secure location for future use. If the file is placed to /tmp prior to reinstalling Spaceify\n"
			printf "the new installation will reuse the id and previous registration.\n\n"

			break;
		else
			printf "\nRegistration failed: ${result}\n"
		fi

		let cnt=cnt+1
	done

	if [ $cnt -eq 6 ]; then
		printf "\nFailed to register edge. The installation is aborted.\n\n"
		exit 255
	fi
else
	printf "\nThe file edge_id.uuid was found containing edge id ${uuid}.\nPrevious edge registration is valid.\n\n"
fi

	# -- update the created/restored edge_id and password to the database -- #
sqlite3 /var/lib/spaceify/data/db/spaceify.db "INSERT OR REPLACE INTO user (edge_id, edge_password)  VALUES('${uuid}', '${edge_password}');"

# ----- Start services ----- #

#service udhcpd restart

if [[ -z $(service network-manager status |& grep running) ]]; then
	printf "\nNetworking not restarted, please do it manually\n"

	resolvconf -u
else
	service network-manager restart

	resolvconf -u

	ifconfig ${wlan} down
	ifconfig ${wlan} 10.0.0.1 netmask 255.255.255.0 up
fi

if [ "$is_internal" -eq "1" ]; then
	service hostapd restart > /dev/null 2>&1 || true
fi

service spaceifydns restart > /dev/null 2>&1 || true
service spaceifyipt restart > /dev/null 2>&1 || true
service spaceify restart > /dev/null 2>&1 || true

service monit restart > /dev/null 2>&1 || true

# Script is found here after installation, if testing is required (eg. finding where the script fails): /var/lib/dpkg/info/spaceify.postinst
# After changing the script run dpkg-reconfigure spaceify
