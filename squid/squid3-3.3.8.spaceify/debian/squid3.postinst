#! /bin/sh

set -e

# SPACEIFY STARTS   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
prevdir=$(pwd)
cd /etc/squid3/certs/

# Create Spaceify Root CA certificate and sign an Edge Server certificate for edge.spaceify.net, if certificates don't already exist.
if [ ! -f "/etc/squid3/certs/spaceifyCA/spaceifyCA.crt" ]; then
	key="4096"
	days="3650"

	# Delete existing files/directories - Create the directory structure and necessary files for ca signing - Create a "random" serial for signed certificates (Unix epoch)
	sudo rm -r spaceifyCA/ > /dev/null 2>&1 || true
	perl mk_new_ca_dir.pl spaceifyCA
	sudo echo $(date +%s) > spaceifyCA/ca.db.serial

	# Create the Spaceify Root CA and move the certificate and key to the spaceifyCA directory
	sudo openssl genrsa -out spaceifyCA.key $key
	sudo openssl req -new -x509 -days $days -key spaceifyCA.key -out spaceifyCA.crt -config openssl.conf
	sudo mv spaceifyCA.crt spaceifyCA/ > /dev/null 2>&1 || true
	sudo mv spaceifyCA.key spaceifyCA/ > /dev/null 2>&1 || true

	# Make the Edge Server certificate and key
	sudo openssl genrsa -out spaceify.key $key
	sudo openssl req -new -key spaceify.key -out spaceify.csr -config openssl_server.conf
	sudo openssl ca -batch -in spaceify.csr -out spaceify.crt -keyfile spaceifyCA/spaceifyCA.key -cert spaceifyCA/spaceifyCA.crt -config openssl_server.conf
fi

# Publish the Spaceify Root CA certificate in Spaceify's www directory
if [ -d "/var/lib/spaceify/www/" ]; then
	sudo cp spaceifyCA/spaceifyCA.crt /var/lib/spaceify/www/ > /dev/null 2>&1 || true
fi

# Copy the web server certificate and key to Spaceify's ssl directory
if [ -d "/var/lib/spaceify/ssl/" ]; then
	sudo cp spaceify.crt /var/lib/spaceify/ssl/ > /dev/null 2>&1 || true
	sudo cp spaceify.key /var/lib/spaceify/ssl/ > /dev/null 2>&1 || true
fi

# Initialize Squid's certificate database
sudo rm -rf /var/lib/ssl_db > /dev/null 2>&1 || true
sudo /usr/lib/squid3/ssl_crtd -c -s /var/lib/ssl_db/ > /dev/null 2>&1 || true
sudo chown proxy.proxy -R /var/lib/ssl_db/ > /dev/null 2>&1 || true

# Create an empty file for the splash screen
sudo rm /etc/squid3/session.db > /dev/null 2>&1 || true
sudo touch /etc/squid3/session.db > /dev/null 2>&1 || true
sudo chown proxy.proxy /etc/squid3/session.db > /dev/null 2>&1 || true

cd $prevdir
# SPACEIFY ENDS  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

grepconf () {
	w=" 	" # space tab
	sq=/etc/squid3/squid.conf
	# sed is cool.
	res=`sed -ne '
		s/^'$1'['"$w"']\+\([^'"$w"']\+\).*$/\1/p;
		t end;
		d;
		:end q' < $sq`
	[ -n "$res" ] || res=$2
	echo "$res"
}

grepconf2 () {
	w=" 	" # space tab
	sq=/etc/squid3/squid.conf
	# sed is cool.
	res=`sed -ne '
		s/^'$1'['"$w"']\+[^'"$w"']\+['"$w"']\+\([^'"$w"']\+\).*$/\1/p;
		t end;
		d;
		:end q' < $sq`
	[ -n "$res" ] || res=$2
	echo "$res"
}

case "$1" in
	configure)
		#
		# Chown the directories.
		#
		log_dir=/var/log/squid3
		cache_dir=`grepconf2 cache_dir /var/spool/squid3`
		usr=`grepconf cache_effective_user proxy`
		grp=`grepconf cache_effective_group proxy`
		
		if [ "$(stat -c %U $cache_dir)" != "$usr" ] ||
		   [ "$(stat -c %G $cache_dir)" != "$grp" ] ; then
			chown $usr:$grp $cache_dir -R
		fi
		
		if [ "$(stat -c %U $log_dir)" != "$usr" ] ||
		   [ "$(stat -c %G $log_dir)" != "$grp" ] ; then
			if [ "$(dpkg-statoverride --list $log_dir)" = "" ] ; then
		  		chown -R $usr:$grp $log_dir
			fi
		fi
	 
		#
		# Create spool dirs if they don't exist.
		#
		if [ -d "$cache_dir" -a ! -d "$cache_dir/00" ]
		then
			echo "Creating Squid HTTP proxy 3.x spool directory structure"
			squid3 -z
		fi
		;;
	abort-upgrade|abort-remove|abort-deconfigure)
		;;
	*)
		#
		#	Unknown action - do nothing.
		#
		exit 0
		;;
esac

if [ -e "/etc/init/squid3.conf" ] ; then
	# Using stop/start because restart fails to reload the upstart job
    # file. See LP: #707479.
	invoke-rc.d squid3 stop || :
	invoke-rc.d squid3 start
fi

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
